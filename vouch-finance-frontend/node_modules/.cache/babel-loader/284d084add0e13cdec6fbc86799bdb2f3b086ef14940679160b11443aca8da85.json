{"ast":null,"code":"function coinbaseWallet() {\n  let {\n    darkMode = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return () => {\n    return {\n      label: 'Coinbase Wallet',\n      getIcon: async () => (await import('./icon.js')).default,\n      getInterface: async _ref => {\n        let {\n          chains,\n          appMetadata\n        } = _ref;\n        const [chain] = chains;\n        const {\n          name,\n          icon\n        } = appMetadata || {};\n        // according to https://github.com/wagmi-dev/wagmi/issues/383\n        // @coinbase/wallet-sdk export double default fields\n        // so we need to detect it to get the real constructor\n        const {\n          default: CoinbaseWalletSDK\n        } = await import('@coinbase/wallet-sdk');\n        const CoinbaseWalletSDKConstructor = CoinbaseWalletSDK.default ? CoinbaseWalletSDK.default : CoinbaseWalletSDK;\n        const base64 = window.btoa(icon || '');\n        const appLogoUrl = `data:image/svg+xml;base64,${base64}`;\n        const instance = new CoinbaseWalletSDKConstructor({\n          appName: name || '',\n          appLogoUrl,\n          darkMode\n        });\n        const coinbaseWalletProvider = instance.makeWeb3Provider(chain.rpcUrl, parseInt(chain.id));\n        // patch the chainChanged event\n        const on = coinbaseWalletProvider.on.bind(coinbaseWalletProvider);\n        coinbaseWalletProvider.on = (event, listener) => {\n          on(event, val => {\n            if (event === 'chainChanged') {\n              listener(`0x${val.toString(16)}`);\n              return;\n            }\n            listener(val);\n          });\n          return coinbaseWalletProvider;\n        };\n        return {\n          provider: coinbaseWalletProvider,\n          instance\n        };\n      }\n    };\n  };\n}\nexport default coinbaseWallet;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}