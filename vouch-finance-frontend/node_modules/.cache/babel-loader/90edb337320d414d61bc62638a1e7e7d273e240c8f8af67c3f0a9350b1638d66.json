{"ast":null,"code":"import { ProviderRpcError } from './errors.js';\n/**\n * Takes a provider instance along with events\n * and requests to override and returns an EIP1193 provider\n *\n *  ## Example:\n *\n * *Overriding events: *\n * ```typescript\n * ```\n *\n * @param provider The provider to patch\n * @param requestPatch An `object` with the method to patch\n * and the implementation with which to patch\n * @param events Events to patch\n * @returns An EIP1193 Provider\n */\nexport const createEIP1193Provider = (provider, requestPatch) => {\n  let baseRequest;\n  if (provider.request) {\n    // Copy the original request method and bind the provider context to it\n    baseRequest = provider.request.bind(provider);\n  } else if (provider.sendAsync) {\n    baseRequest = createRequest(provider);\n  }\n  const request = async _ref => {\n    let {\n      method,\n      params\n    } = _ref;\n    const key = method;\n    // If the request method is set to null\n    // this indicates this method is not supported\n    if (requestPatch && requestPatch[key] === null) {\n      throw new ProviderRpcError({\n        code: 4200,\n        message: `The Provider does not support the requested method: ${method}`\n      });\n    }\n    if (requestPatch && requestPatch[key]) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore // @TODO - Fix this type error\n      return requestPatch[key]({\n        baseRequest,\n        params\n      });\n    } else if (baseRequest) {\n      return baseRequest({\n        method,\n        params\n      });\n    } else {\n      throw new ProviderRpcError({\n        code: 4200,\n        message: `The Provider does not support the requested method: ${method}`\n      });\n    }\n  };\n  provider.request = request;\n  return provider;\n};\nconst createRequest = provider => _ref2 => {\n  let {\n    method,\n    params\n  } = _ref2;\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({\n      id: 0,\n      jsonrpc: '2.0',\n      method,\n      params\n    }, (error, _ref3) => {\n      let {\n        result\n      } = _ref3;\n      if (error) {\n        reject(JSON.parse(error));\n      } else {\n        resolve(result == undefined ? null : result);\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}