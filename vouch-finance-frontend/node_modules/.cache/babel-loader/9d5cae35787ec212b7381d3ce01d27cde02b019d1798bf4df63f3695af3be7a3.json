{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar abi_1 = require(\"@ethersproject/abi\");\nvar EthereumContract = /** @class */function () {\n  function EthereumContract(abi, address, provider) {\n    this.abi = abi;\n    this.address = address;\n    this.provider = provider;\n    this.coder = new abi_1.Interface(this.abi);\n  }\n  EthereumContract.prototype.call = function (method, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var inputParam, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            inputParam = this.coder.encodeFunctionData(method, args);\n            return [4 /*yield*/, this.callEth(inputParam)];\n          case 1:\n            response = _a.sent();\n            if (!response || response === '0x') {\n              return [2 /*return*/, []];\n            }\n            return [2 /*return*/, this.coder.decodeFunctionResult(method, response)];\n        }\n      });\n    });\n  };\n  EthereumContract.prototype.multicall = function (callArgs) {\n    return __awaiter(this, void 0, void 0, function () {\n      var methods, _i, callArgs_1, call, inputParam, response, multicallResult, results, i;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            methods = [];\n            for (_i = 0, callArgs_1 = callArgs; _i < callArgs_1.length; _i++) {\n              call = callArgs_1[_i];\n              methods.push(this.coder.encodeFunctionData(call.method, call.args));\n            }\n            inputParam = this.coder.encodeFunctionData('multicall', [methods]);\n            return [4 /*yield*/, this.callEth(inputParam)];\n          case 1:\n            response = _a.sent();\n            if (!response || response === '0x') {\n              return [2 /*return*/, []];\n            }\n            multicallResult = this.coder.decodeFunctionResult('multicall', response);\n            results = [];\n            for (i = 0; i < multicallResult.results.length; i++) {\n              results.push(this.coder.decodeFunctionResult(callArgs[i].method, multicallResult.results[i]));\n            }\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  EthereumContract.prototype.fetchLogs = function (eventName, tokenId, fromBlock) {\n    if (fromBlock === void 0) {\n      fromBlock = 'earliest';\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var topic, params, request;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            topic = this.coder.getEventTopic(eventName);\n            params = [{\n              fromBlock: fromBlock,\n              toBlock: 'latest',\n              address: this.address,\n              topics: [topic, tokenId]\n            }];\n            request = {\n              method: 'eth_getLogs',\n              params: params\n            };\n            return [4 /*yield*/, this.provider.request(request)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  EthereumContract.prototype.callEth = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, request;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = [{\n              data: data,\n              to: this.address\n            }, 'latest'];\n            request = {\n              method: 'eth_call',\n              params: params\n            };\n            return [4 /*yield*/, this.provider.request(request)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return EthereumContract;\n}();\nexports.default = EthereumContract;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}