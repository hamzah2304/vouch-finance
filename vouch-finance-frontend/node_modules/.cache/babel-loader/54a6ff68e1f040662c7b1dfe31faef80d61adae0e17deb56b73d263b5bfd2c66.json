{"ast":null,"code":"function gnosis(options) {\n  const {\n    whitelistedDomains = [/^https:\\/\\/gnosis-safe\\.io$/, /^https:\\/\\/app\\.safe\\.global$/, /^https:\\/\\/safe\\.global$/]\n  } = options || {};\n  return () => {\n    const loadedInIframe = window.self !== window.top;\n    return loadedInIframe ? {\n      label: 'Safe',\n      getIcon: async () => (await import('./icon.js')).default,\n      getInterface: async () => {\n        const {\n          default: SafeAppsSDK\n        } = await import('@gnosis.pm/safe-apps-sdk');\n        const {\n          SafeAppProvider\n        } = await import('@gnosis.pm/safe-apps-provider');\n        const {\n          createEIP1193Provider\n        } = await import('@web3-onboard/common');\n        const SafeAppProviderConstructor =\n        // @ts-ignore\n        SafeAppsSDK.default || SafeAppsSDK;\n        const opts = {\n          whitelistedDomains\n        };\n        const appsSdk = new SafeAppProviderConstructor(opts);\n        const safe = await Promise.race([appsSdk.safe.getInfo(), new Promise(resolve => setTimeout(resolve, 200))]);\n        if (!safe) {\n          throw new Error(`App must be loaded in a Safe App context, head to <a href=\"https://gnosis-safe.io/app\">the Safe</a> and open this website as an app.`);\n        }\n        const provider = new SafeAppProvider(safe,\n        // @ts-ignore\n        appsSdk);\n        const patchedProvider = createEIP1193Provider(provider, {\n          eth_requestAccounts: () => Promise.resolve([safe.safeAddress])\n        });\n        return {\n          provider: patchedProvider,\n          instance: appsSdk\n        };\n      }\n    } : [];\n  };\n}\nexport default gnosis;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}