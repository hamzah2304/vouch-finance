{"ast":null,"code":"import defaultDayjs from 'dayjs';\nimport customParseFormatPlugin from 'dayjs/plugin/customParseFormat';\nimport localizedFormatPlugin from 'dayjs/plugin/localizedFormat';\nimport isBetweenPlugin from 'dayjs/plugin/isBetween';\ndefaultDayjs.extend(customParseFormatPlugin);\ndefaultDayjs.extend(localizedFormatPlugin);\ndefaultDayjs.extend(isBetweenPlugin);\nvar withLocale = function (dayjs, locale) {\n  return !locale ? dayjs : function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return dayjs.apply(void 0, args).locale(locale);\n  };\n};\nvar defaultFormats = {\n  normalDateWithWeekday: \"ddd, MMM D\",\n  normalDate: \"D MMMM\",\n  shortDate: \"MMM D\",\n  monthAndDate: \"MMMM D\",\n  dayOfMonth: \"D\",\n  year: \"YYYY\",\n  month: \"MMMM\",\n  monthShort: \"MMM\",\n  monthAndYear: \"MMMM YYYY\",\n  weekday: \"dddd\",\n  weekdayShort: \"ddd\",\n  minutes: \"mm\",\n  hours12h: \"hh\",\n  hours24h: \"HH\",\n  seconds: \"ss\",\n  fullTime: \"LT\",\n  fullTime12h: \"hh:mm A\",\n  fullTime24h: \"HH:mm\",\n  fullDate: \"ll\",\n  fullDateWithWeekday: \"dddd, LL\",\n  fullDateTime: \"lll\",\n  fullDateTime12h: \"ll hh:mm A\",\n  fullDateTime24h: \"ll HH:mm\",\n  keyboardDate: \"L\",\n  keyboardDateTime: \"L LT\",\n  keyboardDateTime12h: \"L hh:mm A\",\n  keyboardDateTime24h: \"L HH:mm\"\n};\nvar DayjsUtils = /** @class */function () {\n  function DayjsUtils(_a) {\n    var _this = this;\n    var _b = _a === void 0 ? {} : _a,\n      locale = _b.locale,\n      formats = _b.formats,\n      instance = _b.instance;\n    this.lib = \"dayjs\";\n    this.is12HourCycleInCurrentLocale = function () {\n      var _a, _b;\n      /* istanbul ignore next */\n      return /A|a/.test((_b = (_a = _this.rawDayJsInstance.Ls[_this.locale || \"en\"]) === null || _a === void 0 ? void 0 : _a.formats) === null || _b === void 0 ? void 0 : _b.LT);\n    };\n    this.getCurrentLocaleCode = function () {\n      return _this.locale || \"en\";\n    };\n    this.getFormatHelperText = function (format) {\n      // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js\n      var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?)|./g;\n      return format.match(localFormattingTokens).map(function (token) {\n        var _a, _b;\n        var firstCharacter = token[0];\n        if (firstCharacter === \"L\") {\n          /* istanbul ignore next */\n          return (_b = (_a = _this.rawDayJsInstance.Ls[_this.locale || \"en\"]) === null || _a === void 0 ? void 0 : _a.formats[token]) !== null && _b !== void 0 ? _b : token;\n        }\n        return token;\n      }).join(\"\").replace(/a/gi, \"(a|p)m\").toLocaleLowerCase();\n    };\n    this.parseISO = function (isoString) {\n      return _this.dayjs(isoString);\n    };\n    this.toISO = function (value) {\n      return value.toISOString();\n    };\n    this.parse = function (value, format) {\n      if (value === \"\") {\n        return null;\n      }\n      return _this.dayjs(value, format, _this.locale, true);\n    };\n    this.date = function (value) {\n      if (value === null) {\n        return null;\n      }\n      return _this.dayjs(value);\n    };\n    this.toJsDate = function (value) {\n      return value.toDate();\n    };\n    this.isValid = function (value) {\n      return _this.dayjs(value).isValid();\n    };\n    this.isNull = function (date) {\n      return date === null;\n    };\n    this.getDiff = function (date, comparing, units) {\n      return date.diff(comparing, units);\n    };\n    this.isAfter = function (date, value) {\n      return date.isAfter(value);\n    };\n    this.isBefore = function (date, value) {\n      return date.isBefore(value);\n    };\n    this.isAfterDay = function (date, value) {\n      return date.isAfter(value, \"day\");\n    };\n    this.isBeforeDay = function (date, value) {\n      return date.isBefore(value, \"day\");\n    };\n    this.isBeforeYear = function (date, value) {\n      return date.isBefore(value, \"year\");\n    };\n    this.isAfterYear = function (date, value) {\n      return date.isAfter(value, \"year\");\n    };\n    this.startOfDay = function (date) {\n      return date.startOf(\"day\");\n    };\n    this.endOfDay = function (date) {\n      return date.endOf(\"day\");\n    };\n    this.format = function (date, formatKey) {\n      return _this.formatByString(date, _this.formats[formatKey]);\n    };\n    this.formatByString = function (date, formatString) {\n      return _this.dayjs(date).format(formatString);\n    };\n    this.formatNumber = function (numberToFormat) {\n      return numberToFormat;\n    };\n    this.getHours = function (date) {\n      return date.hour();\n    };\n    this.addSeconds = function (date, count) {\n      return count < 0 ? date.subtract(Math.abs(count), \"second\") : date.add(count, \"second\");\n    };\n    this.addMinutes = function (date, count) {\n      return count < 0 ? date.subtract(Math.abs(count), \"minute\") : date.add(count, \"minute\");\n    };\n    this.addHours = function (date, count) {\n      return count < 0 ? date.subtract(Math.abs(count), \"hour\") : date.add(count, \"hour\");\n    };\n    this.addDays = function (date, count) {\n      return count < 0 ? date.subtract(Math.abs(count), \"day\") : date.add(count, \"day\");\n    };\n    this.addWeeks = function (date, count) {\n      return count < 0 ? date.subtract(Math.abs(count), \"week\") : date.add(count, \"week\");\n    };\n    this.addMonths = function (date, count) {\n      return count < 0 ? date.subtract(Math.abs(count), \"month\") : date.add(count, \"month\");\n    };\n    this.addYears = function (date, count) {\n      return count < 0 ? date.subtract(Math.abs(count), \"year\") : date.add(count, \"year\");\n    };\n    this.setMonth = function (date, count) {\n      return date.set(\"month\", count);\n    };\n    this.setHours = function (date, count) {\n      return date.set(\"hour\", count);\n    };\n    this.getMinutes = function (date) {\n      return date.minute();\n    };\n    this.setMinutes = function (date, count) {\n      return date.set(\"minute\", count);\n    };\n    this.getSeconds = function (date) {\n      return date.second();\n    };\n    this.setSeconds = function (date, count) {\n      return date.set(\"second\", count);\n    };\n    this.getMonth = function (date) {\n      return date.month();\n    };\n    this.getDate = function (date) {\n      return date.date();\n    };\n    this.setDate = function (date, count) {\n      return date.set(\"date\", count);\n    };\n    this.getDaysInMonth = function (date) {\n      return date.daysInMonth();\n    };\n    this.isSameDay = function (date, comparing) {\n      return date.isSame(comparing, \"day\");\n    };\n    this.isSameMonth = function (date, comparing) {\n      return date.isSame(comparing, \"month\");\n    };\n    this.isSameYear = function (date, comparing) {\n      return date.isSame(comparing, \"year\");\n    };\n    this.isSameHour = function (date, comparing) {\n      return date.isSame(comparing, \"hour\");\n    };\n    this.getMeridiemText = function (ampm) {\n      return ampm === \"am\" ? \"AM\" : \"PM\";\n    };\n    this.startOfYear = function (date) {\n      return date.startOf(\"year\");\n    };\n    this.endOfYear = function (date) {\n      return date.endOf(\"year\");\n    };\n    this.startOfMonth = function (date) {\n      return date.startOf(\"month\");\n    };\n    this.endOfMonth = function (date) {\n      return date.endOf(\"month\");\n    };\n    this.startOfWeek = function (date) {\n      return date.startOf(\"week\");\n    };\n    this.endOfWeek = function (date) {\n      return date.endOf(\"week\");\n    };\n    this.getNextMonth = function (date) {\n      return date.add(1, \"month\");\n    };\n    this.getPreviousMonth = function (date) {\n      return date.subtract(1, \"month\");\n    };\n    this.getMonthArray = function (date) {\n      var firstMonth = date.startOf(\"year\");\n      var monthArray = [firstMonth];\n      while (monthArray.length < 12) {\n        var prevMonth = monthArray[monthArray.length - 1];\n        monthArray.push(_this.getNextMonth(prevMonth));\n      }\n      return monthArray;\n    };\n    this.getYear = function (date) {\n      return date.year();\n    };\n    this.setYear = function (date, year) {\n      return date.set(\"year\", year);\n    };\n    this.mergeDateAndTime = function (date, time) {\n      return date.hour(time.hour()).minute(time.minute()).second(time.second());\n    };\n    this.getWeekdays = function () {\n      var start = _this.dayjs().startOf(\"week\");\n      return [0, 1, 2, 3, 4, 5, 6].map(function (diff) {\n        return _this.formatByString(start.add(diff, \"day\"), \"dd\");\n      });\n    };\n    this.isEqual = function (value, comparing) {\n      if (value === null && comparing === null) {\n        return true;\n      }\n      return _this.dayjs(value).isSame(comparing);\n    };\n    this.getWeekArray = function (date) {\n      var start = _this.dayjs(date).startOf(\"month\").startOf(\"week\");\n      var end = _this.dayjs(date).endOf(\"month\").endOf(\"week\");\n      var count = 0;\n      var current = start;\n      var nestedWeeks = [];\n      while (current.isBefore(end)) {\n        var weekNumber = Math.floor(count / 7);\n        nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n        nestedWeeks[weekNumber].push(current);\n        current = current.add(1, \"day\");\n        count += 1;\n      }\n      return nestedWeeks;\n    };\n    this.getYearRange = function (start, end) {\n      var startDate = _this.dayjs(start).startOf(\"year\");\n      var endDate = _this.dayjs(end).endOf(\"year\");\n      var years = [];\n      var current = startDate;\n      while (current.isBefore(endDate)) {\n        years.push(current);\n        current = current.add(1, \"year\");\n      }\n      return years;\n    };\n    this.isWithinRange = function (date, _a) {\n      var start = _a[0],\n        end = _a[1];\n      return date.isBetween(start, end, null, \"[]\");\n    };\n    this.rawDayJsInstance = instance || defaultDayjs;\n    this.dayjs = withLocale(this.rawDayJsInstance, locale);\n    this.locale = locale;\n    this.formats = Object.assign({}, defaultFormats, formats);\n  }\n  return DayjsUtils;\n}();\nexport { DayjsUtils as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}