{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { API, toUrl } from \"./api.abstract\";\nconst a = ethers.utils.getAddress;\nexport class SpectralAPI extends API {\n  constructor(url) {\n    super(\"SpectralAPI\", url);\n  }\n  // Login scope\n  /** Login */\n  login(address, signature, partnerId) {\n    return this.post(`/public/login`, {\n      address: a(address),\n      signature,\n      partner_id: partnerId\n    });\n  }\n  // Leaderboard scope\n  /** Returns a leaderboard */\n  getLeaderboard() {\n    let order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"desc\";\n    let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n    const params = toUrl({\n      page_size: size,\n      page_number: page,\n      sort_order: order\n    });\n    return this.get(`/public/leaderboard${params}`).then(_ => Object.assign(Object.assign({}, _), {\n      entries: _.entries.map(_ref => {\n        let {\n          a,\n          i,\n          r,\n          s\n        } = _ref;\n        return {\n          anonymous: a,\n          identification: i,\n          score: s,\n          rank: r\n        };\n      })\n    }));\n  }\n  // Raw address scope\n  /** Get wallet address details */\n  getAddressData(walletAddress) {\n    return this.getAuth(`/address/${a(walletAddress)}`);\n  }\n  /** Request score calculation for a wallet */\n  calculateAddressScore(walletAddress) {\n    return this.postAuth(`/address/${a(walletAddress)}/calculate_score`);\n  }\n  // Bundles scope\n  /** Create a new bundle */\n  createBundle(name) {\n    let isPublic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let anonymous = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.postAuth(`/bundles`, {\n      name,\n      public: isPublic,\n      anonymous\n    });\n  }\n  /** List existing bundles */\n  getBundles() {\n    return this.getAuth(`/bundles`);\n  }\n  /** Updates a bundle */\n  updateBundle(bundleId, name) {\n    let isPublic = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let anonymous = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.putAuth(`/bundles/${bundleId}`, {\n      name,\n      public: isPublic,\n      anonymous\n    });\n  }\n  /** Deletes a bundle */\n  deleteBundle(bundleId) {\n    return this.deleteAuth(`/bundles/${bundleId}`);\n  }\n  /** Marks bundle as minted */\n  mintBundle(bundleId) {\n    return this.postAuth(`/bundles/${bundleId}/mint`);\n  }\n  /** Marks bundle as burnt */\n  burnBundle(bundleId) {\n    return this.postAuth(`/bundles/${bundleId}/burn`);\n  }\n  /** Request score calculation for a bundle */\n  calculateBundleScore(bundleId) {\n    return this.postAuth(`/bundles/${bundleId}/calculate_score`);\n  }\n  /** Add wallet address to the bundle */\n  addBundleAddress(bundleId, address, signature) {\n    return this.postAuth(`/bundles/${bundleId}/addresses`, {\n      address: a(address),\n      signature\n    });\n  }\n  /** Delete wallet address from the bundle */\n  removeBundleAddress(bundleId, walletAddress) {\n    return this.deleteAuth(`/bundles/${bundleId}/addresses/${a(walletAddress)}`);\n  }\n  /** Set wallet address as a bundle primary */\n  setMasterWallet(bundleId, walletAddress) {\n    return this.putAuth(`/bundles/${bundleId}/addresses/${a(walletAddress)}`, {\n      is_primary: true\n    });\n  }\n  /** Check if bundle name is taken */\n  checkBundleName(name) {\n    return this.getAuth(`/bundles/names/${name}`);\n  }\n}\n//# sourceMappingURL=spectral.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}