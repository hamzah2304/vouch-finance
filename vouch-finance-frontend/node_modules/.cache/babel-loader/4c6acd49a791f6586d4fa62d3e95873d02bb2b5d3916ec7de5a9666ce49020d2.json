{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eth = void 0;\nconst constants_1 = require(\"../eth/constants\");\nconst methods_1 = require(\"../communication/methods\");\nconst inputFormatters = {\n  defaultBlockParam: function () {\n    let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'latest';\n    return arg;\n  },\n  returnFullTxObjectParam: function () {\n    let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return arg;\n  },\n  blockNumberToHex: arg => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg\n};\nclass Eth {\n  constructor(communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getBalance = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getCode = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getStorageAt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam]\n    });\n    this.getPastLogs = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getLogs\n    });\n    this.getBlockByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getBlockByNumber = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getTransactionByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionByHash\n    });\n    this.getTransactionReceipt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionReceipt\n    });\n    this.getTransactionCount = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getGasPrice = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_gasPrice\n    });\n    this.getEstimateGas = transaction => this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_estimateGas\n    })([transaction]);\n  }\n  buildRequest(args) {\n    const {\n      call,\n      formatters\n    } = args;\n    return async params => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n      const payload = {\n        call,\n        params: params || []\n      };\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data;\n    };\n  }\n}\nexports.Eth = Eth;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}