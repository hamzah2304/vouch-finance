{"ast":null,"code":"import { parsePersonalSign, parseTransactionData, convertArrayBufferToHex, convertHexToArrayBuffer, getClientMeta, payloadId, uuid, formatRpcError, parseWalletConnectUri, convertNumberToHex, isJsonRpcResponseSuccess, isJsonRpcResponseError, isSilentPayload, getLocal, signingMethods, mobileLinkChoiceKey, isMobile, removeLocal } from \"@walletconnect/utils\";\nimport SocketTransport from \"@walletconnect/socket-transport\";\nimport { ERROR_SESSION_CONNECTED, ERROR_SESSION_DISCONNECTED, ERROR_SESSION_REJECTED, ERROR_MISSING_JSON_RPC, ERROR_MISSING_RESULT, ERROR_MISSING_ERROR, ERROR_MISSING_METHOD, ERROR_MISSING_ID, ERROR_INVALID_RESPONSE, ERROR_INVALID_URI, ERROR_MISSING_REQUIRED, ERROR_QRCODE_MODAL_NOT_PROVIDED, ERROR_QRCODE_MODAL_USER_CLOSED } from \"./errors\";\nimport EventManager from \"./events\";\nimport SessionStorage from \"./storage\";\nimport { getBridgeUrl } from \"./url\";\nclass Connector {\n  constructor(opts) {\n    this.protocol = \"wc\";\n    this.version = 1;\n    this._bridge = \"\";\n    this._key = null;\n    this._clientId = \"\";\n    this._clientMeta = null;\n    this._peerId = \"\";\n    this._peerMeta = null;\n    this._handshakeId = 0;\n    this._handshakeTopic = \"\";\n    this._connected = false;\n    this._accounts = [];\n    this._chainId = 0;\n    this._networkId = 0;\n    this._rpcUrl = \"\";\n    this._eventManager = new EventManager();\n    this._clientMeta = getClientMeta() || opts.connectorOpts.clientMeta || null;\n    this._cryptoLib = opts.cryptoLib;\n    this._sessionStorage = opts.sessionStorage || new SessionStorage(opts.connectorOpts.storageId);\n    this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n    this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n    this._signingMethods = [...signingMethods, ...(opts.connectorOpts.signingMethods || [])];\n    if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n      throw new Error(ERROR_MISSING_REQUIRED);\n    }\n    if (opts.connectorOpts.bridge) {\n      this.bridge = getBridgeUrl(opts.connectorOpts.bridge);\n    }\n    if (opts.connectorOpts.uri) {\n      this.uri = opts.connectorOpts.uri;\n    }\n    const session = opts.connectorOpts.session || this._getStorageSession();\n    if (session) {\n      this.session = session;\n    }\n    if (this.handshakeId) {\n      this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n    }\n    this._transport = opts.transport || new SocketTransport({\n      protocol: this.protocol,\n      version: this.version,\n      url: this.bridge,\n      subscriptions: [this.clientId]\n    });\n    this._subscribeToInternalEvents();\n    this._initTransport();\n    if (opts.connectorOpts.uri) {\n      this._subscribeToSessionRequest();\n    }\n    if (opts.pushServerOpts) {\n      this._registerPushServer(opts.pushServerOpts);\n    }\n  }\n  set bridge(value) {\n    if (!value) {\n      return;\n    }\n    this._bridge = value;\n  }\n  get bridge() {\n    return this._bridge;\n  }\n  set key(value) {\n    if (!value) {\n      return;\n    }\n    const key = convertHexToArrayBuffer(value);\n    this._key = key;\n  }\n  get key() {\n    if (this._key) {\n      const key = convertArrayBufferToHex(this._key, true);\n      return key;\n    }\n    return \"\";\n  }\n  set clientId(value) {\n    if (!value) {\n      return;\n    }\n    this._clientId = value;\n  }\n  get clientId() {\n    let clientId = this._clientId;\n    if (!clientId) {\n      clientId = this._clientId = uuid();\n    }\n    return this._clientId;\n  }\n  set peerId(value) {\n    if (!value) {\n      return;\n    }\n    this._peerId = value;\n  }\n  get peerId() {\n    return this._peerId;\n  }\n  set clientMeta(value) {}\n  get clientMeta() {\n    let clientMeta = this._clientMeta;\n    if (!clientMeta) {\n      clientMeta = this._clientMeta = getClientMeta();\n    }\n    return clientMeta;\n  }\n  set peerMeta(value) {\n    this._peerMeta = value;\n  }\n  get peerMeta() {\n    const peerMeta = this._peerMeta;\n    return peerMeta;\n  }\n  set handshakeTopic(value) {\n    if (!value) {\n      return;\n    }\n    this._handshakeTopic = value;\n  }\n  get handshakeTopic() {\n    return this._handshakeTopic;\n  }\n  set handshakeId(value) {\n    if (!value) {\n      return;\n    }\n    this._handshakeId = value;\n  }\n  get handshakeId() {\n    return this._handshakeId;\n  }\n  get uri() {\n    const _uri = this._formatUri();\n    return _uri;\n  }\n  set uri(value) {\n    if (!value) {\n      return;\n    }\n    const {\n      handshakeTopic,\n      bridge,\n      key\n    } = this._parseUri(value);\n    this.handshakeTopic = handshakeTopic;\n    this.bridge = bridge;\n    this.key = key;\n  }\n  set chainId(value) {\n    this._chainId = value;\n  }\n  get chainId() {\n    const chainId = this._chainId;\n    return chainId;\n  }\n  set networkId(value) {\n    this._networkId = value;\n  }\n  get networkId() {\n    const networkId = this._networkId;\n    return networkId;\n  }\n  set accounts(value) {\n    this._accounts = value;\n  }\n  get accounts() {\n    const accounts = this._accounts;\n    return accounts;\n  }\n  set rpcUrl(value) {\n    this._rpcUrl = value;\n  }\n  get rpcUrl() {\n    const rpcUrl = this._rpcUrl;\n    return rpcUrl;\n  }\n  set connected(value) {}\n  get connected() {\n    return this._connected;\n  }\n  set pending(value) {}\n  get pending() {\n    return !!this._handshakeTopic;\n  }\n  get session() {\n    return {\n      connected: this.connected,\n      accounts: this.accounts,\n      chainId: this.chainId,\n      bridge: this.bridge,\n      key: this.key,\n      clientId: this.clientId,\n      clientMeta: this.clientMeta,\n      peerId: this.peerId,\n      peerMeta: this.peerMeta,\n      handshakeId: this.handshakeId,\n      handshakeTopic: this.handshakeTopic\n    };\n  }\n  set session(value) {\n    if (!value) {\n      return;\n    }\n    this._connected = value.connected;\n    this.accounts = value.accounts;\n    this.chainId = value.chainId;\n    this.bridge = value.bridge;\n    this.key = value.key;\n    this.clientId = value.clientId;\n    this.clientMeta = value.clientMeta;\n    this.peerId = value.peerId;\n    this.peerMeta = value.peerMeta;\n    this.handshakeId = value.handshakeId;\n    this.handshakeTopic = value.handshakeTopic;\n  }\n  on(event, callback) {\n    const eventEmitter = {\n      event,\n      callback\n    };\n    this._eventManager.subscribe(eventEmitter);\n  }\n  off(event) {\n    this._eventManager.unsubscribe(event);\n  }\n  async createInstantRequest(instantRequest) {\n    this._key = await this._generateKey();\n    const request = this._formatRequest({\n      method: \"wc_instantRequest\",\n      params: [{\n        peerId: this.clientId,\n        peerMeta: this.clientMeta,\n        request: this._formatRequest(instantRequest)\n      }]\n    });\n    this.handshakeId = request.id;\n    this.handshakeTopic = uuid();\n    this._eventManager.trigger({\n      event: \"display_uri\",\n      params: [this.uri]\n    });\n    this.on(\"modal_closed\", () => {\n      throw new Error(ERROR_QRCODE_MODAL_USER_CLOSED);\n    });\n    const endInstantRequest = () => {\n      this.killSession();\n    };\n    try {\n      const result = await this._sendCallRequest(request);\n      if (result) {\n        endInstantRequest();\n      }\n      return result;\n    } catch (error) {\n      endInstantRequest();\n      throw error;\n    }\n  }\n  async connect(opts) {\n    if (!this._qrcodeModal) {\n      throw new Error(ERROR_QRCODE_MODAL_NOT_PROVIDED);\n    }\n    if (this.connected) {\n      return {\n        chainId: this.chainId,\n        accounts: this.accounts\n      };\n    }\n    await this.createSession(opts);\n    return new Promise(async (resolve, reject) => {\n      this.on(\"modal_closed\", () => reject(new Error(ERROR_QRCODE_MODAL_USER_CLOSED)));\n      this.on(\"connect\", (error, payload) => {\n        if (error) {\n          return reject(error);\n        }\n        resolve(payload.params[0]);\n      });\n    });\n  }\n  async createSession(opts) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n    if (this.pending) {\n      return;\n    }\n    this._key = await this._generateKey();\n    const request = this._formatRequest({\n      method: \"wc_sessionRequest\",\n      params: [{\n        peerId: this.clientId,\n        peerMeta: this.clientMeta,\n        chainId: opts && opts.chainId ? opts.chainId : null\n      }]\n    });\n    this.handshakeId = request.id;\n    this.handshakeTopic = uuid();\n    this._sendSessionRequest(request, \"Session update rejected\", {\n      topic: this.handshakeTopic\n    });\n    this._eventManager.trigger({\n      event: \"display_uri\",\n      params: [this.uri]\n    });\n  }\n  approveSession(sessionStatus) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n    this.chainId = sessionStatus.chainId;\n    this.accounts = sessionStatus.accounts;\n    this.networkId = sessionStatus.networkId || 0;\n    this.rpcUrl = sessionStatus.rpcUrl || \"\";\n    const sessionParams = {\n      approved: true,\n      chainId: this.chainId,\n      networkId: this.networkId,\n      accounts: this.accounts,\n      rpcUrl: this.rpcUrl,\n      peerId: this.clientId,\n      peerMeta: this.clientMeta\n    };\n    const response = {\n      id: this.handshakeId,\n      jsonrpc: \"2.0\",\n      result: sessionParams\n    };\n    this._sendResponse(response);\n    this._connected = true;\n    this._setStorageSession();\n    this._eventManager.trigger({\n      event: \"connect\",\n      params: [{\n        peerId: this.peerId,\n        peerMeta: this.peerMeta,\n        chainId: this.chainId,\n        accounts: this.accounts\n      }]\n    });\n  }\n  rejectSession(sessionError) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n    const message = sessionError && sessionError.message ? sessionError.message : ERROR_SESSION_REJECTED;\n    const response = this._formatResponse({\n      id: this.handshakeId,\n      error: {\n        message\n      }\n    });\n    this._sendResponse(response);\n    this._connected = false;\n    this._eventManager.trigger({\n      event: \"disconnect\",\n      params: [{\n        message\n      }]\n    });\n    this._removeStorageSession();\n  }\n  updateSession(sessionStatus) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n    this.chainId = sessionStatus.chainId;\n    this.accounts = sessionStatus.accounts;\n    this.networkId = sessionStatus.networkId || 0;\n    this.rpcUrl = sessionStatus.rpcUrl || \"\";\n    const sessionParams = {\n      approved: true,\n      chainId: this.chainId,\n      networkId: this.networkId,\n      accounts: this.accounts,\n      rpcUrl: this.rpcUrl\n    };\n    const request = this._formatRequest({\n      method: \"wc_sessionUpdate\",\n      params: [sessionParams]\n    });\n    this._sendSessionRequest(request, \"Session update rejected\");\n    this._eventManager.trigger({\n      event: \"session_update\",\n      params: [{\n        chainId: this.chainId,\n        accounts: this.accounts\n      }]\n    });\n    this._manageStorageSession();\n  }\n  async killSession(sessionError) {\n    const message = sessionError ? sessionError.message : \"Session Disconnected\";\n    const sessionParams = {\n      approved: false,\n      chainId: null,\n      networkId: null,\n      accounts: null\n    };\n    const request = this._formatRequest({\n      method: \"wc_sessionUpdate\",\n      params: [sessionParams]\n    });\n    await this._sendRequest(request);\n    this._handleSessionDisconnect(message);\n  }\n  async sendTransaction(tx) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n    const parsedTx = parseTransactionData(tx);\n    const request = this._formatRequest({\n      method: \"eth_sendTransaction\",\n      params: [parsedTx]\n    });\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n  async signTransaction(tx) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n    const parsedTx = parseTransactionData(tx);\n    const request = this._formatRequest({\n      method: \"eth_signTransaction\",\n      params: [parsedTx]\n    });\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n  async signMessage(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n    const request = this._formatRequest({\n      method: \"eth_sign\",\n      params\n    });\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n  async signPersonalMessage(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n    params = parsePersonalSign(params);\n    const request = this._formatRequest({\n      method: \"personal_sign\",\n      params\n    });\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n  async signTypedData(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n    const request = this._formatRequest({\n      method: \"eth_signTypedData\",\n      params\n    });\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n  async updateChain(chainParams) {\n    if (!this._connected) {\n      throw new Error(\"Session currently disconnected\");\n    }\n    const request = this._formatRequest({\n      method: \"wallet_updateChain\",\n      params: [chainParams]\n    });\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n  unsafeSend(request, options) {\n    this._sendRequest(request, options);\n    this._eventManager.trigger({\n      event: \"call_request_sent\",\n      params: [{\n        request,\n        options\n      }]\n    });\n    return new Promise((resolve, reject) => {\n      this._subscribeToResponse(request.id, (error, payload) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        if (!payload) {\n          throw new Error(ERROR_MISSING_JSON_RPC);\n        }\n        resolve(payload);\n      });\n    });\n  }\n  async sendCustomRequest(request, options) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n    switch (request.method) {\n      case \"eth_accounts\":\n        return this.accounts;\n      case \"eth_chainId\":\n        return convertNumberToHex(this.chainId);\n      case \"eth_sendTransaction\":\n      case \"eth_signTransaction\":\n        if (request.params) {\n          request.params[0] = parseTransactionData(request.params[0]);\n        }\n        break;\n      case \"personal_sign\":\n        if (request.params) {\n          request.params = parsePersonalSign(request.params);\n        }\n        break;\n      default:\n        break;\n    }\n    const formattedRequest = this._formatRequest(request);\n    const result = await this._sendCallRequest(formattedRequest, options);\n    return result;\n  }\n  approveRequest(response) {\n    if (isJsonRpcResponseSuccess(response)) {\n      const formattedResponse = this._formatResponse(response);\n      this._sendResponse(formattedResponse);\n    } else {\n      throw new Error(ERROR_MISSING_RESULT);\n    }\n  }\n  rejectRequest(response) {\n    if (isJsonRpcResponseError(response)) {\n      const formattedResponse = this._formatResponse(response);\n      this._sendResponse(formattedResponse);\n    } else {\n      throw new Error(ERROR_MISSING_ERROR);\n    }\n  }\n  transportClose() {\n    this._transport.close();\n  }\n  async _sendRequest(request, options) {\n    const callRequest = this._formatRequest(request);\n    const encryptionPayload = await this._encrypt(callRequest);\n    const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== \"undefined\" ? options.topic : this.peerId;\n    const payload = JSON.stringify(encryptionPayload);\n    const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== \"undefined\" ? !options.forcePushNotification : isSilentPayload(callRequest);\n    this._transport.send(payload, topic, silent);\n  }\n  async _sendResponse(response) {\n    const encryptionPayload = await this._encrypt(response);\n    const topic = this.peerId;\n    const payload = JSON.stringify(encryptionPayload);\n    const silent = true;\n    this._transport.send(payload, topic, silent);\n  }\n  async _sendSessionRequest(request, errorMsg, options) {\n    this._sendRequest(request, options);\n    this._subscribeToSessionResponse(request.id, errorMsg);\n  }\n  _sendCallRequest(request, options) {\n    this._sendRequest(request, options);\n    this._eventManager.trigger({\n      event: \"call_request_sent\",\n      params: [{\n        request,\n        options\n      }]\n    });\n    return this._subscribeToCallResponse(request.id);\n  }\n  _formatRequest(request) {\n    if (typeof request.method === \"undefined\") {\n      throw new Error(ERROR_MISSING_METHOD);\n    }\n    const formattedRequest = {\n      id: typeof request.id === \"undefined\" ? payloadId() : request.id,\n      jsonrpc: \"2.0\",\n      method: request.method,\n      params: typeof request.params === \"undefined\" ? [] : request.params\n    };\n    return formattedRequest;\n  }\n  _formatResponse(response) {\n    if (typeof response.id === \"undefined\") {\n      throw new Error(ERROR_MISSING_ID);\n    }\n    const baseResponse = {\n      id: response.id,\n      jsonrpc: \"2.0\"\n    };\n    if (isJsonRpcResponseError(response)) {\n      const error = formatRpcError(response.error);\n      const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {\n        error\n      });\n      return errorResponse;\n    } else if (isJsonRpcResponseSuccess(response)) {\n      const successResponse = Object.assign(Object.assign({}, baseResponse), response);\n      return successResponse;\n    }\n    throw new Error(ERROR_INVALID_RESPONSE);\n  }\n  _handleSessionDisconnect(errorMsg) {\n    const message = errorMsg || \"Session Disconnected\";\n    if (!this._connected) {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.close();\n      }\n      removeLocal(mobileLinkChoiceKey);\n    }\n    if (this._connected) {\n      this._connected = false;\n    }\n    if (this._handshakeId) {\n      this._handshakeId = 0;\n    }\n    if (this._handshakeTopic) {\n      this._handshakeTopic = \"\";\n    }\n    if (this._peerId) {\n      this._peerId = \"\";\n    }\n    this._eventManager.trigger({\n      event: \"disconnect\",\n      params: [{\n        message\n      }]\n    });\n    this._removeStorageSession();\n    this.transportClose();\n  }\n  _handleSessionResponse(errorMsg, sessionParams) {\n    if (sessionParams) {\n      if (sessionParams.approved) {\n        if (!this._connected) {\n          this._connected = true;\n          if (sessionParams.chainId) {\n            this.chainId = sessionParams.chainId;\n          }\n          if (sessionParams.accounts) {\n            this.accounts = sessionParams.accounts;\n          }\n          if (sessionParams.peerId && !this.peerId) {\n            this.peerId = sessionParams.peerId;\n          }\n          if (sessionParams.peerMeta && !this.peerMeta) {\n            this.peerMeta = sessionParams.peerMeta;\n          }\n          this._eventManager.trigger({\n            event: \"connect\",\n            params: [{\n              peerId: this.peerId,\n              peerMeta: this.peerMeta,\n              chainId: this.chainId,\n              accounts: this.accounts\n            }]\n          });\n        } else {\n          if (sessionParams.chainId) {\n            this.chainId = sessionParams.chainId;\n          }\n          if (sessionParams.accounts) {\n            this.accounts = sessionParams.accounts;\n          }\n          this._eventManager.trigger({\n            event: \"session_update\",\n            params: [{\n              chainId: this.chainId,\n              accounts: this.accounts\n            }]\n          });\n        }\n        this._manageStorageSession();\n      } else {\n        this._handleSessionDisconnect(errorMsg);\n      }\n    } else {\n      this._handleSessionDisconnect(errorMsg);\n    }\n  }\n  async _handleIncomingMessages(socketMessage) {\n    const activeTopics = [this.clientId, this.handshakeTopic];\n    if (!activeTopics.includes(socketMessage.topic)) {\n      return;\n    }\n    let encryptionPayload;\n    try {\n      encryptionPayload = JSON.parse(socketMessage.payload);\n    } catch (error) {\n      return;\n    }\n    const payload = await this._decrypt(encryptionPayload);\n    if (payload) {\n      this._eventManager.trigger(payload);\n    }\n  }\n  _subscribeToSessionRequest() {\n    this._transport.subscribe(this.handshakeTopic);\n  }\n  _subscribeToResponse(id, callback) {\n    this.on(`response:${id}`, callback);\n  }\n  _subscribeToSessionResponse(id, errorMsg) {\n    this._subscribeToResponse(id, (error, payload) => {\n      if (error) {\n        this._handleSessionResponse(error.message);\n        return;\n      }\n      if (isJsonRpcResponseSuccess(payload)) {\n        this._handleSessionResponse(errorMsg, payload.result);\n      } else if (payload.error && payload.error.message) {\n        this._handleSessionResponse(payload.error.message);\n      } else {\n        this._handleSessionResponse(errorMsg);\n      }\n    });\n  }\n  _subscribeToCallResponse(id) {\n    return new Promise((resolve, reject) => {\n      this._subscribeToResponse(id, (error, payload) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        if (isJsonRpcResponseSuccess(payload)) {\n          resolve(payload.result);\n        } else if (payload.error && payload.error.message) {\n          reject(payload.error);\n        } else {\n          reject(new Error(ERROR_INVALID_RESPONSE));\n        }\n      });\n    });\n  }\n  _subscribeToInternalEvents() {\n    this.on(\"display_uri\", () => {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.open(this.uri, () => {\n          this._eventManager.trigger({\n            event: \"modal_closed\",\n            params: []\n          });\n        }, this._qrcodeModalOptions);\n      }\n    });\n    this.on(\"connect\", () => {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.close();\n      }\n    });\n    this.on(\"call_request_sent\", (error, payload) => {\n      const {\n        request\n      } = payload.params[0];\n      if (isMobile() && this._signingMethods.includes(request.method)) {\n        const mobileLinkUrl = getLocal(mobileLinkChoiceKey);\n        if (mobileLinkUrl) {\n          window.location.href = mobileLinkUrl.href;\n        }\n      }\n    });\n    this.on(\"wc_sessionRequest\", (error, payload) => {\n      if (error) {\n        this._eventManager.trigger({\n          event: \"error\",\n          params: [{\n            code: \"SESSION_REQUEST_ERROR\",\n            message: error.toString()\n          }]\n        });\n      }\n      this.handshakeId = payload.id;\n      this.peerId = payload.params[0].peerId;\n      this.peerMeta = payload.params[0].peerMeta;\n      const internalPayload = Object.assign(Object.assign({}, payload), {\n        method: \"session_request\"\n      });\n      this._eventManager.trigger(internalPayload);\n    });\n    this.on(\"wc_sessionUpdate\", (error, payload) => {\n      if (error) {\n        this._handleSessionResponse(error.message);\n      }\n      this._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n    });\n  }\n  _initTransport() {\n    this._transport.on(\"message\", socketMessage => this._handleIncomingMessages(socketMessage));\n    this._transport.on(\"open\", () => this._eventManager.trigger({\n      event: \"transport_open\",\n      params: []\n    }));\n    this._transport.on(\"close\", () => this._eventManager.trigger({\n      event: \"transport_close\",\n      params: []\n    }));\n    this._transport.on(\"error\", () => this._eventManager.trigger({\n      event: \"transport_error\",\n      params: [\"Websocket connection failed\"]\n    }));\n    this._transport.open();\n  }\n  _formatUri() {\n    const protocol = this.protocol;\n    const handshakeTopic = this.handshakeTopic;\n    const version = this.version;\n    const bridge = encodeURIComponent(this.bridge);\n    const key = this.key;\n    const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;\n    return uri;\n  }\n  _parseUri(uri) {\n    const result = parseWalletConnectUri(uri);\n    if (result.protocol === this.protocol) {\n      if (!result.handshakeTopic) {\n        throw Error(\"Invalid or missing handshakeTopic parameter value\");\n      }\n      const handshakeTopic = result.handshakeTopic;\n      if (!result.bridge) {\n        throw Error(\"Invalid or missing bridge url parameter value\");\n      }\n      const bridge = decodeURIComponent(result.bridge);\n      if (!result.key) {\n        throw Error(\"Invalid or missing key parameter value\");\n      }\n      const key = result.key;\n      return {\n        handshakeTopic,\n        bridge,\n        key\n      };\n    } else {\n      throw new Error(ERROR_INVALID_URI);\n    }\n  }\n  async _generateKey() {\n    if (this._cryptoLib) {\n      const result = await this._cryptoLib.generateKey();\n      return result;\n    }\n    return null;\n  }\n  async _encrypt(data) {\n    const key = this._key;\n    if (this._cryptoLib && key) {\n      const result = await this._cryptoLib.encrypt(data, key);\n      return result;\n    }\n    return null;\n  }\n  async _decrypt(payload) {\n    const key = this._key;\n    if (this._cryptoLib && key) {\n      const result = await this._cryptoLib.decrypt(payload, key);\n      return result;\n    }\n    return null;\n  }\n  _getStorageSession() {\n    let result = null;\n    if (this._sessionStorage) {\n      result = this._sessionStorage.getSession();\n    }\n    return result;\n  }\n  _setStorageSession() {\n    if (this._sessionStorage) {\n      this._sessionStorage.setSession(this.session);\n    }\n  }\n  _removeStorageSession() {\n    if (this._sessionStorage) {\n      this._sessionStorage.removeSession();\n    }\n  }\n  _manageStorageSession() {\n    if (this._connected) {\n      this._setStorageSession();\n    } else {\n      this._removeStorageSession();\n    }\n  }\n  _registerPushServer(pushServerOpts) {\n    if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n    }\n    if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n    }\n    if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n    }\n    const pushSubscription = {\n      bridge: this.bridge,\n      topic: this.clientId,\n      type: pushServerOpts.type,\n      token: pushServerOpts.token,\n      peerName: \"\",\n      language: pushServerOpts.language || \"\"\n    };\n    this.on(\"connect\", async (error, payload) => {\n      if (error) {\n        throw error;\n      }\n      if (pushServerOpts.peerMeta) {\n        const peerName = payload.params[0].peerMeta.name;\n        pushSubscription.peerName = peerName;\n      }\n      try {\n        const response = await fetch(`${pushServerOpts.url}/new`, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(pushSubscription)\n        });\n        const json = await response.json();\n        if (!json.success) {\n          throw Error(\"Failed to register in Push Server\");\n        }\n      } catch (error) {\n        throw Error(\"Failed to register in Push Server\");\n      }\n    });\n  }\n}\nexport default Connector;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}