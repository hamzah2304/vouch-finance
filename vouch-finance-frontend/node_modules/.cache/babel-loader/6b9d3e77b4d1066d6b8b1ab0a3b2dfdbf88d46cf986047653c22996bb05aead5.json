{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { useCallback, useState } from \"react\";\nexport var MintingStatus;\n(function (MintingStatus) {\n  MintingStatus[MintingStatus[\"Error\"] = -1] = \"Error\";\n  MintingStatus[MintingStatus[\"TransactionPending\"] = 1] = \"TransactionPending\";\n  MintingStatus[MintingStatus[\"WaitingForConfirmations\"] = 2] = \"WaitingForConfirmations\";\n  MintingStatus[MintingStatus[\"Minted\"] = 3] = \"Minted\";\n})(MintingStatus || (MintingStatus = {}));\nconst error = message => {\n  throw new Error(\"[MintNFC error] \" + message);\n};\nexport const useMintNFC = (contracts, bundle, auth) => {\n  var _a, _b, _c, _d;\n  const [mintStatus, setMintStatus] = useState({});\n  const updateStatus = status => {\n    var _a;\n    return ((_a = bundle.account) === null || _a === void 0 ? void 0 : _a.address) && setMintStatus(Object.assign(Object.assign({}, mintStatus), {\n      [bundle.account.address]: status\n    }));\n  };\n  const mint = useCallback(function () {\n    let isPublic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return __awaiter(void 0, void 0, void 0, function* () {\n      var _e;\n      if (!(contracts === null || contracts === void 0 ? void 0 : contracts.NFC)) return error(\"Contract not loaded\");\n      try {\n        updateStatus(MintingStatus.TransactionPending);\n        let getTx;\n        if (isPublic) {\n          const addresses = (_e = bundle.bundle.secondaryAddresses) !== null && _e !== void 0 ? _e : [];\n          const signatures = addresses.map(address => auth.tokens.getSignature(address));\n          getTx = contracts === null || contracts === void 0 ? void 0 : contracts.NFC.mintAndAdd(addresses, signatures);\n        } else {\n          getTx = contracts === null || contracts === void 0 ? void 0 : contracts.NFC.mint();\n        }\n        const tx = yield getTx.catch(e => {\n          console.log(e);\n          throw error(\"Error minting the NFC\");\n        });\n        updateStatus(MintingStatus.WaitingForConfirmations);\n        yield tx.wait(4);\n        yield bundle.markAsMint();\n        updateStatus(MintingStatus.Minted);\n        bundle.clearBundleInProgress();\n      } catch (e) {\n        updateStatus(MintingStatus.Error);\n        console.log(e);\n        error('Error minting the bundle.');\n      }\n    });\n  }, [contracts === null || contracts === void 0 ? void 0 : contracts.NFC, bundle.markAsMint]);\n  const mintBundleInProgress = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    var _f;\n    if (!bundle.bundle) return error(\"No bundle in progress\");\n    if (!bundle.account || bundle.account.bundleMismatch) return error(\"Error with current account\");\n    if (bundle.bundle.primaryAddress.toLowerCase() !== ((_f = bundle.account.address) === null || _f === void 0 ? void 0 : _f.toLowerCase())) return error(\"Account is not master wallet\");\n    return mint(bundle.bundle.isPublic);\n  }), [mint, bundle.bundle, bundle.account]);\n  return {\n    account: {\n      address: bundle.account.address,\n      canMintBundle: ((_a = bundle === null || bundle === void 0 ? void 0 : bundle.bundle) === null || _a === void 0 ? void 0 : _a.primaryAddress.toLowerCase()) === ((_c = (_b = bundle.account) === null || _b === void 0 ? void 0 : _b.address) === null || _c === void 0 ? void 0 : _c.toLowerCase()),\n      mintingStatus: mintStatus[(_d = bundle.account) === null || _d === void 0 ? void 0 : _d.address] // eslint-disable-line\n    },\n\n    mintBundleInProgress\n  };\n};\n//# sourceMappingURL=mintNFC.hook.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}