{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport React, { createContext, useContext, useMemo, useState, useCallback } from \"react\";\nimport { useWeb3OnboardHook } from \"./web3Onboard.hook\";\nimport { useContractLoader } from \"./contractLoader.hook\";\nimport { useAuth } from \"./auth.hook\";\nimport { useBundle } from \"./bundle.hook\";\nimport { useLeaderboard } from \"./leaderboard.hook\";\nimport { useScore } from \"./score.hook\";\nimport { useApiAuth } from \"./api-auth.hook\";\nimport { useENS } from \"./ens.hook\";\nimport { useMainnetProvider } from \"./mainnet.hook\";\nimport { useMintNFC } from \"./mintNFC.hook\";\nimport { SpectralAPI } from \"./api/spectral\";\nconst defaultTrackingFunctions = {\n  login: () => {},\n  addAddressToBundle: () => {}\n};\nexport const CoreProvider = _ref => {\n  let {\n    children,\n    track: trackConfig,\n    config\n  } = _ref;\n  const track = Object.assign({}, defaultTrackingFunctions, trackConfig || {});\n  const [update, setUpdate] = useState(0);\n  const forceUpdate = useCallback(() => setUpdate(update + 1), [update, setUpdate]);\n  const apis = {\n    spectral: useMemo(() => new SpectralAPI(config.backendUrl || 'https://blade.spectral.finance/api/v2'), [])\n  };\n  const web3Core = useWeb3OnboardHook(config);\n  const contracts = useContractLoader(config, web3Core.provider);\n  const mainnetProviders = useMainnetProvider(config.providersLoader);\n  const auth = useAuth(forceUpdate, web3Core, apis.spectral, track, config);\n  const bundle = useBundle(auth, apis.spectral, track);\n  const leaderboard = useLeaderboard(apis.spectral);\n  const score = useScore(bundle, auth, apis.spectral);\n  const apiAuth = useApiAuth(auth, bundle, [apis.spectral]);\n  const ens = useENS(bundle, mainnetProviders.mainnetProvider);\n  const mintNFC = useMintNFC(contracts, bundle, auth);\n  return React.createElement(CoreContext.Provider, {\n    value: {\n      address: web3Core.account,\n      account: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, web3Core.accountInfo), auth.account), bundle.account), score.account), apiAuth.account), ens.account), mintNFC.account),\n      web3: Object.assign(Object.assign({}, web3Core), {\n        contracts\n      }),\n      contracts,\n      bundle: Object.assign(Object.assign({}, bundle), {\n        bundleDomains: ens.bundleDomains\n      }),\n      providers: mainnetProviders,\n      leaderboard,\n      score,\n      auth,\n      ens,\n      mintNFC,\n      impersonation: apiAuth,\n      login: () => __awaiter(void 0, void 0, void 0, function* () {\n        yield auth.login();\n      }),\n      logout: () => __awaiter(void 0, void 0, void 0, function* () {\n        yield auth.logout();\n        yield web3Core.disconnect();\n      }),\n      apis\n    }\n  }, children);\n};\nexport const CoreContext = createContext({});\n// Helper hook to access the provider values\nexport const useCore = () => useContext(CoreContext);\nexport const useCoreWeb3 = () => useContext(CoreContext).web3;\nexport default CoreProvider;\n//# sourceMappingURL=core.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}