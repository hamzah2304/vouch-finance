{"ast":null,"code":"import React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport { useCore } from \"@spectral-finance/react-core\";\nimport { onboardCss } from \"../styles/web3onboard\";\nimport { shortenAddress } from \"../utils\";\nexport var DialogSteps;\n(function (DialogSteps) {\n  DialogSteps[DialogSteps[\"ONBOARDING\"] = 0] = \"ONBOARDING\";\n  DialogSteps[DialogSteps[\"FAQ\"] = 1] = \"FAQ\";\n  DialogSteps[DialogSteps[\"WALLET_CONNECTION\"] = 2] = \"WALLET_CONNECTION\";\n  DialogSteps[DialogSteps[\"BUNDLE\"] = 3] = \"BUNDLE\";\n  DialogSteps[DialogSteps[\"SUCCESS\"] = 4] = \"SUCCESS\";\n})(DialogSteps || (DialogSteps = {}));\nconst useTrigger = () => {\n  const [triggerNumber, setNext] = useState(0);\n  const trigger = useCallback(() => {\n    setTimeout(() => setNext(Math.random()), 0);\n  }, []);\n  return [triggerNumber, trigger];\n};\nconst DialogStepsContext = createContext({});\nconst DialogStepsProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const {\n    login,\n    account,\n    bundle,\n    web3\n  } = useCore();\n  const [currentStep, setCurrentStep] = useState(DialogSteps.ONBOARDING);\n  const [forceingSwitchWallet, forceSwitchWallet] = useState(false);\n  const [onboardElement, setOnboardElement] = useState(document.createElement(\"div\"));\n  const [nextCheckLogin, triggerLogin] = useTrigger();\n  const [nextCheckBundle, triggerBundle] = useTrigger();\n  // Change step behavior\n  const navigateStep = useCallback(step => {\n    if (currentStep === DialogSteps.ONBOARDING && step === DialogSteps.WALLET_CONNECTION && account.isInBundleInProgress) {\n      setCurrentStep(DialogSteps.BUNDLE);\n      return;\n    }\n    setCurrentStep(step);\n  }, [setCurrentStep, account.address, account.isInBundleInProgress]);\n  // Bundle status on logged account\n  useEffect(() => {\n    bundle.quickCreationOrAddition(shortenAddress(account.address)).then();\n  }, [nextCheckBundle]);\n  // When an wallet is connected but not logged try to login\n  const [loadingSignature, setLoadingSignature] = useState(false);\n  useEffect(() => {\n    if (account.address && !account.logged) {\n      setLoadingSignature(true);\n      const timeout = setTimeout(() => {\n        login().then(() => {\n          setCurrentStep(DialogSteps.BUNDLE);\n          setLoadingSignature(false);\n          setTimeout(() => triggerBundle(), 100);\n        }).catch(error => {\n          setLoadingSignature(false);\n          setCurrentStep(DialogSteps.ONBOARDING);\n        });\n      }, 1800);\n      return () => clearTimeout(timeout);\n    }\n    if (account.address && account.isInBundleInProgress && !forceSwitchWallet) {\n      const timeout = setTimeout(() => {\n        setCurrentStep(DialogSteps.BUNDLE);\n      }, 1800);\n      return () => clearTimeout(timeout);\n    }\n    if (account.address && account.logged && !account.isInBundleInProgress) {\n      const timeout = setTimeout(() => {\n        triggerBundle();\n      }, 1800);\n      return () => clearTimeout(timeout);\n    }\n    if (account.address && account.isInBundleInProgress) {\n      setCurrentStep(DialogSteps.BUNDLE);\n    }\n  }, [nextCheckLogin, triggerBundle]);\n  useEffect(() => {\n    if (currentStep === DialogSteps.WALLET_CONNECTION) {\n      triggerLogin();\n    }\n  }, [account.address, account.logged, currentStep]);\n  // Connect wallets\n  const connectWallet = useCallback(() => {\n    if (!forceingSwitchWallet) {\n      web3.connect().then(triggerLogin);\n    } else {\n      web3.switchWallet();\n    }\n  }, [forceingSwitchWallet, triggerLogin, web3.connect, web3.switchWallet]);\n  // Store onboard element\n  useEffect(() => {\n    const onboardStyles = document.createElement(\"style\");\n    onboardStyles.innerHTML = onboardCss;\n    const onboard = document.querySelector(\"onboard-v2\");\n    onboard.shadowRoot.appendChild(onboardStyles);\n    setOnboardElement(onboard);\n  }, []);\n  return React.createElement(DialogStepsContext.Provider, {\n    value: {\n      onboardElement,\n      currentStep,\n      setCurrentStep: navigateStep,\n      connectWallet,\n      addNewWallet: () => {\n        return;\n        setCurrentStep(DialogSteps.WALLET_CONNECTION);\n        forceSwitchWallet(true);\n      },\n      forceingSwitchWallet,\n      clearForceingSwitchWallet: () => forceSwitchWallet(false),\n      loadingSignature\n    }\n  }, children);\n};\nexport const useDialogStepsContext = () => useContext(DialogStepsContext);\nexport { DialogStepsProvider };\n//# sourceMappingURL=DialogStepsContext.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}