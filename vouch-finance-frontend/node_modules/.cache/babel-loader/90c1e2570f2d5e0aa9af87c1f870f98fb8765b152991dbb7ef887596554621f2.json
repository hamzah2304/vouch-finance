{"ast":null,"code":"import { createEIP1193Provider } from '@web3-onboard/common';\nimport { InjectedNameSpace, ProviderIdentityFlag, ProviderLabel } from './types.js';\nconst UNSUPPORTED_METHOD = null;\nfunction getInjectedInterface(identity, checkOtherProviderFlags) {\n  return async () => ({\n    provider: window.ethereum.providers && Array.isArray(window.ethereum.providers) ? getInterfaceFromProvidersArray(identity, checkOtherProviderFlags) : window.ethereum\n  });\n}\nfunction getInterfaceFromProvidersArray(identity, checkOtherProviderFlags) {\n  return window.ethereum.providers.find(provider => {\n    return checkOtherProviderFlags ? !!provider[identity] && !otherProviderFlagsExist(identity, provider) : !!provider[identity];\n  });\n}\nfunction otherProviderFlagsExist(identity, provider) {\n  const otherProviderFlags = Object.values(ProviderIdentityFlag).filter(id => id !== identity && id !== ProviderIdentityFlag.Detected);\n  return otherProviderFlags.some(id => !!provider[id]);\n}\nconst metamask = {\n  label: ProviderLabel.MetaMask,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref => {\n    let {\n      provider\n    } = _ref;\n    return !!provider && !!provider[ProviderIdentityFlag.MetaMask] && !otherProviderFlagsExist(ProviderIdentityFlag.MetaMask, provider);\n  },\n  getIcon: async () => (await import('./icons/metamask.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.MetaMask, true),\n  platforms: ['all']\n};\nconst infinitywallet = {\n  label: ProviderLabel.InfinityWallet,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref2 => {\n    let {\n      provider\n    } = _ref2;\n    return !!provider && !!provider[ProviderIdentityFlag.InfinityWallet];\n  },\n  getIcon: async () => (await import('./icons/infinitywallet.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.InfinityWallet),\n  platforms: ['desktop']\n};\nconst exodus = {\n  label: ProviderLabel.Exodus,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref3 => {\n    let {\n      provider\n    } = _ref3;\n    return !!provider && !!provider[ProviderIdentityFlag.Exodus];\n  },\n  getIcon: async () => (await import('./icons/exodus.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.Exodus),\n  platforms: ['all']\n};\nconst frontier = {\n  label: ProviderLabel.Frontier,\n  injectedNamespace: InjectedNameSpace.Frontier,\n  checkProviderIdentity: _ref4 => {\n    let {\n      provider\n    } = _ref4;\n    return !!provider && !!provider['ethereum'] && !!provider['ethereum'][ProviderIdentityFlag.Frontier];\n  },\n  getIcon: async () => (await import('./icons/frontier.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.frontier.ethereum)\n  }),\n  platforms: ['all']\n};\nconst brave = {\n  label: ProviderLabel.Brave,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref5 => {\n    let {\n      provider\n    } = _ref5;\n    return !!provider && !!provider[ProviderIdentityFlag.BraveWallet];\n  },\n  getIcon: async () => (await import('./icons/brave.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.BraveWallet),\n  platforms: ['all']\n};\nconst binance = {\n  label: ProviderLabel.Binance,\n  injectedNamespace: InjectedNameSpace.Binance,\n  checkProviderIdentity: _ref6 => {\n    let {\n      provider\n    } = _ref6;\n    return !!provider && !!provider[ProviderIdentityFlag.Binance];\n  },\n  getIcon: async () => (await import('./icons/binance.js')).default,\n  getInterface: async () => {\n    // Replace the provider as the BNB provider is readonly\n    let tempBNBProvider = {\n      ...window.BinanceChain\n    };\n    window.BinanceChain = tempBNBProvider;\n    const addListener = window.BinanceChain.on.bind(window.BinanceChain);\n    window.BinanceChain.on = (event, func) => {\n      // intercept chainChanged event and format string\n      if (event === 'chainChanged') {\n        addListener(event, chainId => {\n          const cb = func;\n          cb(`0x${parseInt(chainId).toString(16)}`);\n        });\n      } else {\n        addListener(event, func);\n      }\n    };\n    const provider = createEIP1193Provider(window.BinanceChain, {\n      eth_chainId: _ref7 => {\n        let {\n          baseRequest\n        } = _ref7;\n        return baseRequest({\n          method: 'eth_chainId'\n        }).then(id => `0x${parseInt(id).toString(16)}`);\n      },\n      // Unsupported method -- will throw error\n      eth_selectAccounts: UNSUPPORTED_METHOD,\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD\n    });\n    provider.removeListener = (event, func) => {};\n    return {\n      provider\n    };\n  },\n  platforms: ['desktop']\n};\nconst coinbase = {\n  label: ProviderLabel.Coinbase,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref8 => {\n    let {\n      provider\n    } = _ref8;\n    return !!provider && !!provider[ProviderIdentityFlag.Coinbase] || !!provider && !!provider[ProviderIdentityFlag.CoinbaseExtension];\n  },\n  getIcon: async () => (await import('./icons/coinbase.js')).default,\n  getInterface: async () => {\n    const {\n      provider\n    } = await getInjectedInterface(ProviderIdentityFlag.CoinbaseExtension)();\n    const addListener = provider.on.bind(provider);\n    provider.on = (event, func) => {\n      // intercept chainChanged event and format string\n      if (event === 'chainChanged') {\n        addListener(event, chainId => {\n          const cb = func;\n          cb(`0x${parseInt(chainId).toString(16)}`);\n        });\n      } else {\n        addListener(event, func);\n      }\n    };\n    return {\n      provider\n    };\n  },\n  platforms: ['all']\n};\nconst detected = {\n  label: ProviderLabel.Detected,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref9 => {\n    let {\n      provider\n    } = _ref9;\n    return !!provider && !!provider[ProviderIdentityFlag.Detected];\n  },\n  getIcon: async () => (await import('./icons/detected.js')).default,\n  getInterface: async () => ({\n    provider: window.ethereum\n  }),\n  platforms: ['all']\n};\nconst trust = {\n  label: ProviderLabel.Trust,\n  injectedNamespace: InjectedNameSpace.Trust,\n  checkProviderIdentity: _ref10 => {\n    let {\n      provider\n    } = _ref10;\n    return !!provider && !!provider[ProviderIdentityFlag.Trust];\n  },\n  getIcon: async () => (await import('./icons/trust.js')).default,\n  getInterface: async () => {\n    const ethereumInjectionExists = window.hasOwnProperty(InjectedNameSpace.Ethereum);\n    let provider;\n    // check if trust is injected into window.ethereum\n    if (ethereumInjectionExists && window[InjectedNameSpace.Ethereum].isTrust) {\n      provider = window[InjectedNameSpace.Ethereum];\n    } else {\n      // directly use the window.trustwallet injection\n      provider = window[InjectedNameSpace.Trust];\n    }\n    return {\n      provider\n    };\n  },\n  platforms: ['all']\n};\nconst opera = {\n  label: ProviderLabel.Opera,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref11 => {\n    let {\n      provider\n    } = _ref11;\n    return !!provider && !!provider[ProviderIdentityFlag.Opera];\n  },\n  getIcon: async () => (await import('./icons/opera.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum, {\n      eth_requestAccounts: async _ref12 => {\n        let {\n          baseRequest\n        } = _ref12;\n        return baseRequest({\n          method: 'eth_accounts'\n        });\n      },\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    })\n  }),\n  platforms: ['all']\n};\nconst status = {\n  label: ProviderLabel.Status,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref13 => {\n    let {\n      provider\n    } = _ref13;\n    return !!provider && !!provider[ProviderIdentityFlag.Status];\n  },\n  getIcon: async () => (await import('./icons/status.js')).default,\n  getInterface: async () => {\n    const provider = window.ethereum;\n    return {\n      provider\n    };\n  },\n  platforms: ['mobile']\n};\nconst alphawallet = {\n  label: ProviderLabel.AlphaWallet,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref14 => {\n    let {\n      provider\n    } = _ref14;\n    return !!provider && !!provider[ProviderIdentityFlag.AlphaWallet];\n  },\n  getIcon: async () => (await import('./icons/alphawallet.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum, {\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD,\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    })\n  }),\n  platforms: ['mobile']\n};\nconst apexwallet = {\n  label: ProviderLabel.ApexWallet,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref15 => {\n    let {\n      provider\n    } = _ref15;\n    return !!provider && !!provider[ProviderIdentityFlag.ApexWallet];\n  },\n  getIcon: async () => (await import('./icons/apexwallet.js')).default,\n  getInterface: async () => ({\n    provider: window.ethereum\n  }),\n  platforms: ['desktop', 'Chrome', 'Chromium', 'Microsoft Edge']\n};\nconst atoken = {\n  label: ProviderLabel.AToken,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref16 => {\n    let {\n      provider\n    } = _ref16;\n    return !!provider && !!provider[ProviderIdentityFlag.AToken];\n  },\n  getIcon: async () => (await import('./icons/atoken.js')).default,\n  getInterface: async () => ({\n    provider: window.ethereum\n  }),\n  platforms: ['mobile']\n};\nconst bifrostwallet = {\n  label: ProviderLabel.BifrostWallet,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref17 => {\n    let {\n      provider\n    } = _ref17;\n    return !!provider && !!provider[ProviderIdentityFlag.BifrostWallet];\n  },\n  getIcon: async () => (await import('./icons/bifrostwallet.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.BifrostWallet),\n  platforms: ['all']\n};\nconst bitpie = {\n  label: ProviderLabel.Bitpie,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: () => !!window.Bitpie,\n  getIcon: async () => (await import('./icons/bitpie.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum, {\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD,\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    })\n  }),\n  platforms: ['mobile']\n};\nconst blockwallet = {\n  label: ProviderLabel.BlockWallet,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref18 => {\n    let {\n      provider\n    } = _ref18;\n    return !!provider && !!provider[ProviderIdentityFlag.BlockWallet];\n  },\n  getIcon: async () => (await import('./icons/blockwallet.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.BlockWallet),\n  platforms: ['desktop']\n};\nconst frame = {\n  label: ProviderLabel.Frame,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref19 => {\n    let {\n      provider\n    } = _ref19;\n    return !!provider && !!provider[ProviderIdentityFlag.Frame];\n  },\n  getIcon: async () => (await import('./icons/frame.js')).default,\n  getInterface: async () => ({\n    provider: window.ethereum\n  }),\n  platforms: ['desktop']\n};\nconst huobiwallet = {\n  label: ProviderLabel.HuobiWallet,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref20 => {\n    let {\n      provider\n    } = _ref20;\n    return !!provider && !!provider[ProviderIdentityFlag.HuobiWallet];\n  },\n  getIcon: async () => (await import('./icons/huobiwallet.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum, {\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD,\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    })\n  }),\n  platforms: ['mobile']\n};\nconst hyperpay = {\n  label: ProviderLabel.HyperPay,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  // Note: The property `hiWallet` is as of now the only known way of identifying hyperpay\n  // wallet as it is a direct clone of metamask. `checkProviderIdentity` implementation is subject to\n  // future changes\n  checkProviderIdentity: () => !!window.hiWallet,\n  getIcon: async () => (await import('./icons/hyperpay.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum, {\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD,\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    })\n  }),\n  platforms: ['mobile']\n};\nconst imtoken = {\n  label: ProviderLabel.ImToken,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref21 => {\n    let {\n      provider\n    } = _ref21;\n    return !!provider && !!provider[ProviderIdentityFlag.ImToken];\n  },\n  getIcon: async () => (await import('./icons/imtoken.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum, {\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD,\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    })\n  }),\n  platforms: ['mobile']\n};\nconst liquality = {\n  label: ProviderLabel.Liquality,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref22 => {\n    let {\n      provider\n    } = _ref22;\n    return !!provider && !!provider[ProviderIdentityFlag.Liquality];\n  },\n  getIcon: async () => (await import('./icons/liquality.js')).default,\n  getInterface: async () => {\n    const provider = createEIP1193Provider(window.ethereum, {\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD,\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    });\n    provider.removeListener = (event, func) => {};\n    return {\n      provider\n    };\n  },\n  platforms: ['desktop']\n};\nconst meetone = {\n  label: ProviderLabel.MeetOne,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref23 => {\n    let {\n      provider\n    } = _ref23;\n    return !!provider && provider[ProviderIdentityFlag.MeetOne] === 'MEETONE';\n  },\n  getIcon: async () => (await import('./icons/meetone.js')).default,\n  getInterface: async () => ({\n    provider: window.ethereum\n  }),\n  platforms: ['mobile']\n};\nconst mykey = {\n  label: ProviderLabel.MyKey,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref24 => {\n    let {\n      provider\n    } = _ref24;\n    return !!provider && !!provider[ProviderIdentityFlag.MyKey];\n  },\n  getIcon: async () => (await import('./icons/mykey.js')).default,\n  getInterface: async () => ({\n    provider: window.ethereum\n  }),\n  platforms: ['mobile']\n};\nconst ownbit = {\n  label: ProviderLabel.OwnBit,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref25 => {\n    let {\n      provider\n    } = _ref25;\n    return !!provider && !!provider[ProviderIdentityFlag.OwnBit];\n  },\n  getIcon: async () => (await import('./icons/ownbit.js')).default,\n  getInterface: async () => {\n    const provider = createEIP1193Provider(window.ethereum, {\n      eth_chainId: _ref26 => {\n        let {\n          baseRequest\n        } = _ref26;\n        return baseRequest({\n          method: 'eth_chainId'\n        }).then(id => `0x${parseInt(id).toString(16)}`);\n      },\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD,\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    });\n    provider.removeListener = (event, listener) => {};\n    provider.on = (event, listener) => {};\n    return {\n      provider\n    };\n  },\n  platforms: ['mobile']\n};\nconst tokenpocket = {\n  label: ProviderLabel.TokenPocket,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref27 => {\n    let {\n      provider\n    } = _ref27;\n    return !!provider && !!provider[ProviderIdentityFlag.TokenPocket] && !provider[ProviderIdentityFlag.TP];\n  },\n  getIcon: async () => (await import('./icons/tokenpocket.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.TokenPocket),\n  platforms: ['all']\n};\nconst tp = {\n  label: ProviderLabel.TP,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref28 => {\n    let {\n      provider\n    } = _ref28;\n    return !!provider && !!provider[ProviderIdentityFlag.TP];\n  },\n  getIcon: async () => (await import('./icons/tp.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum, {\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD,\n      eth_selectAccounts: UNSUPPORTED_METHOD\n    })\n  }),\n  platforms: ['mobile']\n};\nconst xdefi = {\n  label: ProviderLabel.XDEFI,\n  injectedNamespace: InjectedNameSpace.XFI,\n  checkProviderIdentity: _ref29 => {\n    let {\n      provider\n    } = _ref29;\n    return provider && provider.ethereum && provider.ethereum[ProviderIdentityFlag.XDEFI];\n  },\n  getIcon: async () => (await import('./icons/xdefi.js')).default,\n  getInterface: async () => ({\n    provider: window.xfi && window.xfi.ethereum\n  }),\n  platforms: ['all']\n};\nconst oneInch = {\n  label: ProviderLabel.OneInch,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref30 => {\n    let {\n      provider\n    } = _ref30;\n    return !!provider && !!provider[ProviderIdentityFlag.OneInch];\n  },\n  getIcon: async () => (await import('./icons/oneInch.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum)\n  }),\n  platforms: ['mobile']\n};\nconst tokenary = {\n  label: ProviderLabel.Tokenary,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref31 => {\n    let {\n      provider\n    } = _ref31;\n    return !!provider && !!provider[ProviderIdentityFlag.Tokenary];\n  },\n  getIcon: async () => (await import('./icons/tokenary.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum)\n  }),\n  platforms: ['all']\n};\nconst tally = {\n  label: ProviderLabel.Tally,\n  injectedNamespace: InjectedNameSpace.Tally,\n  checkProviderIdentity: _ref32 => {\n    let {\n      provider\n    } = _ref32;\n    return !!provider && !!provider[ProviderIdentityFlag.Tally];\n  },\n  getIcon: async () => (await import('./icons/tallywallet.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.tally)\n  }),\n  platforms: ['desktop']\n};\nconst zeal = {\n  label: ProviderLabel.Zeal,\n  injectedNamespace: InjectedNameSpace.Zeal,\n  checkProviderIdentity: _ref33 => {\n    let {\n      provider\n    } = _ref33;\n    return !!provider && !!provider[ProviderIdentityFlag.Zeal];\n  },\n  getIcon: async () => (await import('./icons/zeal.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.zeal)\n  }),\n  platforms: ['desktop']\n};\nconst rabby = {\n  label: ProviderLabel.Rabby,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref34 => {\n    let {\n      provider\n    } = _ref34;\n    return !!provider && !!provider[ProviderIdentityFlag.Rabby];\n  },\n  getIcon: async () => (await import('./icons/rabby.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum)\n  }),\n  platforms: ['desktop']\n};\nconst mathwallet = {\n  label: ProviderLabel.MathWallet,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref35 => {\n    let {\n      provider\n    } = _ref35;\n    return !!provider && !!provider[ProviderIdentityFlag.MathWallet];\n  },\n  getIcon: async () => (await import('./icons/mathwallet.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.MathWallet),\n  platforms: ['all']\n};\nconst gamestop = {\n  label: ProviderLabel.GameStop,\n  injectedNamespace: InjectedNameSpace.GameStop,\n  checkProviderIdentity: _ref36 => {\n    let {\n      provider\n    } = _ref36;\n    return !!provider && !!provider[ProviderIdentityFlag.GameStop];\n  },\n  getIcon: async () => (await import('./icons/gamestop.js')).default,\n  getInterface: async () => {\n    const provider = createEIP1193Provider(window.gamestop, {\n      eth_chainId: _ref37 => {\n        let {\n          baseRequest\n        } = _ref37;\n        return baseRequest({\n          method: 'eth_chainId'\n        }).then(id => `0x${parseInt(id).toString(16)}`);\n      },\n      wallet_switchEthereumChain: UNSUPPORTED_METHOD\n    });\n    provider.removeListener = (event, listener) => {};\n    provider.on = (event, listener) => {};\n    return {\n      provider\n    };\n  },\n  platforms: ['desktop']\n};\nconst bitkeep = {\n  label: ProviderLabel.BitKeep,\n  injectedNamespace: InjectedNameSpace.BitKeep,\n  checkProviderIdentity: _ref38 => {\n    let {\n      provider\n    } = _ref38;\n    return !!provider && !!provider['ethereum'][ProviderIdentityFlag.BitKeep];\n  },\n  getIcon: async () => (await import('./icons/bitkeep.js')).default,\n  getInterface: async () => ({\n    provider: window.bitkeep && window.bitkeep.ethereum\n  }),\n  platforms: ['all']\n};\nconst sequence = {\n  label: ProviderLabel.Sequence,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref39 => {\n    let {\n      provider\n    } = _ref39;\n    return !!provider && !!provider[ProviderIdentityFlag.Sequence];\n  },\n  getIcon: async () => (await import('./icons/sequence.js')).default,\n  getInterface: async () => ({\n    provider: window.ethereum\n  }),\n  platforms: ['all']\n};\nconst core = {\n  label: ProviderLabel.Core,\n  injectedNamespace: InjectedNameSpace.Avalanche,\n  checkProviderIdentity: _ref40 => {\n    let {\n      provider\n    } = _ref40;\n    return !!provider && !!provider[ProviderIdentityFlag.Core];\n  },\n  getIcon: async () => (await import('./icons/core.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.Core),\n  // Core wallet is only tested in chrome or chromium browser\n  platforms: ['desktop', 'Chrome', 'Chromium', 'Microsoft Edge']\n};\nconst bitski = {\n  label: ProviderLabel.Bitski,\n  injectedNamespace: InjectedNameSpace.Bitski,\n  checkProviderIdentity: _ref41 => {\n    let {\n      provider\n    } = _ref41;\n    return !!provider && !!provider.getProvider && !!provider.getProvider().isBitski;\n  },\n  getIcon: async () => (await import('./icons/bitski.js')).default,\n  getInterface: async () => ({\n    provider: window.Bitski && window.Bitski.getProvider && window.Bitski.getProvider()\n  }),\n  platforms: ['all']\n};\nconst zerion = {\n  label: ProviderLabel.Zerion,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref42 => {\n    let {\n      provider\n    } = _ref42;\n    return !!provider && !!provider[ProviderIdentityFlag.Zerion];\n  },\n  getIcon: async () => (await import('./icons/zerion.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum)\n  }),\n  platforms: ['all']\n};\nconst enkrypt = {\n  label: ProviderLabel.Enkrypt,\n  injectedNamespace: InjectedNameSpace.Enkrypt,\n  checkProviderIdentity: _ref43 => {\n    let {\n      provider\n    } = _ref43;\n    return !!provider && !!provider.providers && !!provider.providers.ethereum;\n  },\n  getIcon: async () => (await import('./icons/enkrypt.js')).default,\n  getInterface: async () => {\n    const addListener = window.enkrypt.providers.ethereum.on.bind(window.enkrypt.providers.ethereum);\n    window.enkrypt.providers.ethereum.on = (event, func) => {\n      // intercept chainChanged event and format string\n      if (event === 'chainChanged') {\n        addListener(event, chainId => {\n          const cb = func;\n          cb(`0x${parseInt(chainId).toString(16)}`);\n        });\n      } else {\n        addListener(event, func);\n      }\n    };\n    const provider = createEIP1193Provider(window.enkrypt.providers.ethereum, {\n      eth_chainId: _ref44 => {\n        let {\n          baseRequest\n        } = _ref44;\n        return baseRequest({\n          method: 'eth_chainId'\n        }).then(id => `0x${parseInt(id).toString(16)}`);\n      }\n    });\n    provider.removeListener = (event, func) => {};\n    return {\n      provider\n    };\n  },\n  platforms: ['all']\n};\nconst phantom = {\n  label: ProviderLabel.Phantom,\n  injectedNamespace: InjectedNameSpace.Phantom,\n  checkProviderIdentity: _ref45 => {\n    let {\n      provider\n    } = _ref45;\n    return !!provider && !!provider['ethereum'] && !!provider['ethereum'][ProviderIdentityFlag.Phantom];\n  },\n  getIcon: async () => (await import('./icons/phantom.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.phantom.ethereum)\n  }),\n  platforms: ['all']\n};\nconst safepal = {\n  label: ProviderLabel.SafePal,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref46 => {\n    let {\n      provider\n    } = _ref46;\n    return !!provider && !!provider[ProviderIdentityFlag.SafePal];\n  },\n  getIcon: async () => (await import('./icons/safepal.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.ethereum)\n  }),\n  platforms: ['all']\n};\nconst rainbow = {\n  label: ProviderLabel.Rainbow,\n  injectedNamespace: InjectedNameSpace.Ethereum,\n  checkProviderIdentity: _ref47 => {\n    let {\n      provider\n    } = _ref47;\n    return !!provider && !!provider[ProviderIdentityFlag.Rainbow];\n  },\n  getIcon: async () => (await import('./icons/rainbow.js')).default,\n  getInterface: getInjectedInterface(ProviderIdentityFlag.Rainbow),\n  platforms: ['all']\n};\nconst okxwallet = {\n  label: ProviderLabel.OKXWallet,\n  injectedNamespace: InjectedNameSpace.OKXWallet,\n  checkProviderIdentity: _ref48 => {\n    let {\n      provider\n    } = _ref48;\n    return !!provider && !!provider[ProviderIdentityFlag.OKXWallet];\n  },\n  getIcon: async () => (await import('./icons/okxwallet.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.okxwallet)\n  }),\n  platforms: ['desktop']\n};\nconst defiwallet = {\n  label: ProviderLabel.DeFiWallet,\n  injectedNamespace: InjectedNameSpace.DeFiConnectProvider,\n  checkProviderIdentity: _ref49 => {\n    let {\n      provider\n    } = _ref49;\n    return !!provider && !!provider[ProviderIdentityFlag.DeFiWallet];\n  },\n  getIcon: async () => (await import('./icons/defiwallet.js')).default,\n  getInterface: async () => ({\n    provider: createEIP1193Provider(window.deficonnectProvider)\n  }),\n  platforms: ['all']\n};\nconst wallets = [zeal, exodus, frontier, metamask, bifrostwallet, binance, coinbase, detected, trust, opera, status, alphawallet, apexwallet, atoken, bitpie, blockwallet, brave, frame, huobiwallet, hyperpay, imtoken, liquality, meetone, mykey, ownbit, tokenpocket, tp, xdefi, oneInch, tokenary, tally, rabby, mathwallet, gamestop, bitkeep, sequence, core, bitski, enkrypt, phantom, okxwallet, zerion, rainbow, safepal, defiwallet, infinitywallet];\nexport default wallets;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}