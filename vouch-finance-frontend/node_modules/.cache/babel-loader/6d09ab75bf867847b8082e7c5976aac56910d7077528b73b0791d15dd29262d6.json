{"ast":null,"code":"function portis(options) {\n  const {\n    apiKey\n  } = options;\n  return () => {\n    return {\n      label: 'Portis',\n      getIcon: async () => (await import('./icon.js')).default,\n      getInterface: async _ref => {\n        let {\n          chains\n        } = _ref;\n        const {\n          default: Portis\n        } = await import('@portis/web3');\n        const {\n          createEIP1193Provider\n        } = await import('@web3-onboard/common');\n        const instance = new Portis(apiKey, {\n          nodeUrl: chains[0].rpcUrl,\n          chainId: chains[0].id\n        });\n        const portisProvider = instance.provider;\n        const provider = createEIP1193Provider(portisProvider, {\n          eth_requestAccounts: portisProvider.enable,\n          eth_selectAccounts: null,\n          wallet_switchEthereumChain: async _ref2 => {\n            let {\n              params\n            } = _ref2;\n            const chain = chains.find(_ref3 => {\n              let {\n                id\n              } = _ref3;\n              return id === params[0].chainId;\n            });\n            if (!chain) throw new Error('chain must be set before switching');\n            instance.changeNetwork({\n              nodeUrl: chain.rpcUrl,\n              chainId: chain.id\n            });\n            //@ts-ignore\n            provider.emit('chainChanged', chain.id);\n            return null;\n          }\n        });\n        return {\n          provider,\n          instance\n        };\n      }\n    };\n  };\n}\nexport default portis;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}