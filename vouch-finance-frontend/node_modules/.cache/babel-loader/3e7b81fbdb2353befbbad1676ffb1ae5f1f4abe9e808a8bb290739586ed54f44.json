{"ast":null,"code":"import React, { useCallback, useEffect, useState } from \"react\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { calculateTickByMacroScore } from \"../../utils/ticks\";\nimport * as SC from \"./ScoreCircularProgress.styles\";\nconst ScoreCircularProgress = _ref => {\n  let {\n    score,\n    size,\n    width,\n    height,\n    strokeWidth = 10,\n    disabled,\n    minted,\n    hideScore,\n    loading,\n    showGrade,\n    tryAgain,\n    pathColor,\n    lineColor\n  } = _ref;\n  const [progress, setProgress] = useState(0);\n  const [circleColor, setCircleColor] = useState();\n  const [tick, setTick] = useState(0); // just for testnet until api properly returns it\n  if (size) {\n    width = size + \"px\";\n    height = size + \"px\";\n  }\n  const calculateFinalScore = () => {\n    const finalScore = score === null || (score === null || score === void 0 ? void 0 : score.toString()) === \"0\" ? localStorage.getItem(\"score\") : score;\n    if (!finalScore) return;\n    setProgress(Number(finalScore));\n    const tick = calculateTickByMacroScore(Number(finalScore));\n    setTick(tick);\n  };\n  useEffect(() => {\n    calculateFinalScore();\n  }, [score]);\n  useEffect(() => {\n    calculateFinalScore();\n  }, []);\n  useEffect(() => {\n    getCircleColor();\n  }, [tick]);\n  const getCircleColor = useCallback(() => {\n    switch (tick) {\n      case 1:\n        setCircleColor(\"#FC695C\");\n        return;\n      case 2:\n        setCircleColor(\"#FD9858\");\n        return;\n      case 3:\n        setCircleColor(\"#E9DA61\");\n        return;\n      case 4:\n        setCircleColor(\"#8BDA9C\");\n        return;\n      case 5:\n        setCircleColor(\"#8BDA9C\");\n        // setCircleColor(\"#54B268\");\n        return;\n      default:\n        setCircleColor(\"#FC695C\");\n        return;\n    }\n  }, [tick]);\n  return React.createElement(SC.WrapperHover, {\n    width: width,\n    height: height,\n    showGrade: showGrade\n  }, React.createElement(SC.Wrapper, {\n    showGrade: showGrade\n  }, React.createElement(SC.Container, null, React.createElement(CircularProgressbar, {\n    value: progress,\n    maxValue: 850,\n    strokeWidth: strokeWidth,\n    background: true,\n    // eslint-disable-next-line no-nested-ternary\n    text: tryAgain ? \"Try Again\" : loading ? \"Loading...\" : hideScore ? \"\" : disabled ? \"?\" : parseInt((score === null || score === void 0 ? void 0 : score.toString()) || localStorage.getItem(\"score\") || \"0\").toString(),\n    styles: {\n      path: {\n        stroke: pathColor || (disabled ? \"#484c50\" : circleColor),\n        transform: \"rotate(0.5turn)\",\n        transformOrigin: \"center center\",\n        strokeWidth: strokeWidth\n      },\n      trail: {\n        stroke: minted ? \"#E5EBF3\" : lineColor || \"#E5EBF3\",\n        strokeWidth: strokeWidth * 0.5,\n        opacity: 0.7\n      },\n      background: {\n        fill: \"transparent\"\n      },\n      text: {\n        fill: minted ? \"#DDE5F2\" : \"#221D3C\",\n        fontSize: minted ? 28 : loading ? \"12px\" : \"24px\",\n        fontWeight: \"bold\",\n        dominantBaseline: \"central\"\n      }\n    }\n  })), showGrade && React.createElement(SC.Container, {\n    backface: true\n  }, React.createElement(SC.Grade, {\n    color: circleColor || \"#647693\"\n  }, \"FEDCBA\"[tick], React.createElement(\"span\", null, \"Your Grade\")))));\n};\nScoreCircularProgress.defaultProps = {\n  score: 0,\n  width: \"160px\",\n  height: \"160px\",\n  disabled: false,\n  minted: false,\n  hideScore: false,\n  loading: false\n};\nexport default ScoreCircularProgress;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}