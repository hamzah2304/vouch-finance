{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmahmood/Downloads/ETHDenver/vouch-finance/vouch-finance-frontend/src/features/sdk/Lend/components/withdraw/Success.tsx\",\n  _s = $RefreshSig$();\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useEffect, useState } from 'react';\nimport transferAbi from '../../../../../abis/Transfer.json';\nimport { useContractFunction } from '../../../../../hooks/useContractFunction';\nimport { downScale, formatMoney } from '../../../../../utils/number';\nimport { decodeLogs } from '../../../../../utils/transaction';\nimport { TxDoneModal } from '../../../components/TxDoneModal';\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport function Success(_ref) {\n  _s();\n  let {\n    poolInfo,\n    handleAction\n  } = _ref;\n  const {\n    account\n  } = useWeb3React();\n  const {\n    poolUnderlyingToken\n  } = poolInfo;\n  const txReceipt = useContractFunction(state => state.txReceipt);\n  const {\n    symbol,\n    decimals,\n    address\n  } = poolUnderlyingToken;\n  const [withdrawedAmount, setWithdrawedAmount] = useState();\n  useEffect(() => {\n    if (txReceipt) {\n      const events = decodeLogs(txReceipt.logs, transferAbi);\n      if (events) {\n        events.forEach(event => {\n          const {\n            from,\n            to,\n            value\n          } = event.args;\n          if (from.toLowerCase() === poolInfo.pool.toLowerCase() && to.toLowerCase() === (account === null || account === void 0 ? void 0 : account.toLowerCase())) {\n            const withdrawedAmount = downScale(value.toString(), decimals);\n            setWithdrawedAmount(withdrawedAmount);\n          }\n        });\n      }\n    }\n  }, [account, address, decimals, poolInfo.pool, txReceipt]);\n  const content = [`You successfully withdrawn ${formatMoney(withdrawedAmount)} ${symbol}.`];\n  return _jsx(TxDoneModal, {\n    handleAction: handleAction,\n    content: content\n  });\n}\n_s(Success, \"/FpwmRvK/v6hYXkQi9jv9mWYuJY=\", false, function () {\n  return [useWeb3React, useContractFunction];\n});\n_c = Success;\nvar _c;\n$RefreshReg$(_c, \"Success\");","map":{"version":3,"names":["useWeb3React","React","useEffect","useState","transferAbi","useContractFunction","downScale","formatMoney","decodeLogs","TxDoneModal","Success","poolInfo","handleAction","account","poolUnderlyingToken","txReceipt","state","symbol","decimals","address","withdrawedAmount","setWithdrawedAmount","events","logs","forEach","event","from","to","value","args","toLowerCase","pool","toString","content"],"sources":["/Users/hamzahmahmood/Downloads/ETHDenver/vouch-finance/vouch-finance-frontend/src/features/sdk/Lend/components/withdraw/Success.tsx"],"sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport React, { useEffect, useState } from 'react'\n\nimport transferAbi from '../../../../../abis/Transfer.json'\nimport { useContractFunction } from '../../../../../hooks/useContractFunction'\nimport { downScale, formatMoney } from '../../../../../utils/number'\nimport { PoolInfoType } from '../../../../../utils/pool'\nimport { decodeLogs } from '../../../../../utils/transaction'\nimport { TxDoneModal } from '../../../components/TxDoneModal'\n\ntype Props = {\n  poolInfo: PoolInfoType\n  handleAction: () => void\n}\n\nexport function Success({ poolInfo, handleAction }: Props): React.ReactElement {\n  const { account } = useWeb3React()\n  const { poolUnderlyingToken } = poolInfo\n  const txReceipt = useContractFunction((state) => state.txReceipt)\n  const { symbol, decimals, address } = poolUnderlyingToken\n  const [withdrawedAmount, setWithdrawedAmount] = useState<string | undefined>()\n\n  useEffect(() => {\n    if (txReceipt) {\n      const events = decodeLogs(txReceipt.logs, transferAbi)\n      if (events) {\n        events.forEach((event) => {\n          const { from, to, value } = event.args\n          if (\n            from.toLowerCase() === poolInfo.pool.toLowerCase() &&\n            to.toLowerCase() === account?.toLowerCase()\n          ) {\n            const withdrawedAmount = downScale(value.toString(), decimals)\n            setWithdrawedAmount(withdrawedAmount)\n          }\n        })\n      }\n    }\n  }, [account, address, decimals, poolInfo.pool, txReceipt])\n\n  const content = [\n    `You successfully withdrawn ${formatMoney(withdrawedAmount)} ${symbol}.`,\n  ]\n\n  return <TxDoneModal handleAction={handleAction} content={content} />\n}\n"],"mappings":";;AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,WAAW,MAAM,mCAAmC;AAC3D,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,SAAS,EAAEC,WAAW,QAAQ,6BAA6B;AAEpE,SAASC,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,WAAW,QAAQ,iCAAiC;AAAA;AAO7D,OAAO,SAASC,OAAO,OAAwD;EAAA;EAAA,IAAvD;IAAEC,QAAQ;IAAEC;EAAoB,CAAC;EACvD,MAAM;IAAEC;EAAQ,CAAC,GAAGb,YAAY,EAAE;EAClC,MAAM;IAAEc;EAAoB,CAAC,GAAGH,QAAQ;EACxC,MAAMI,SAAS,GAAGV,mBAAmB,CAAEW,KAAK,IAAKA,KAAK,CAACD,SAAS,CAAC;EACjE,MAAM;IAAEE,MAAM;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAGL,mBAAmB;EACzD,MAAM,CAACM,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,EAAsB;EAE9ED,SAAS,CAAC,MAAM;IACd,IAAIa,SAAS,EAAE;MACb,MAAMO,MAAM,GAAGd,UAAU,CAACO,SAAS,CAACQ,IAAI,EAAEnB,WAAW,CAAC;MACtD,IAAIkB,MAAM,EAAE;QACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAK;UACxB,MAAM;YAAEC,IAAI;YAAEC,EAAE;YAAEC;UAAM,CAAC,GAAGH,KAAK,CAACI,IAAI;UACtC,IACEH,IAAI,CAACI,WAAW,EAAE,KAAKnB,QAAQ,CAACoB,IAAI,CAACD,WAAW,EAAE,IAClDH,EAAE,CAACG,WAAW,EAAE,MAAKjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEiB,WAAW,EAAE,GAC3C;YACA,MAAMV,gBAAgB,GAAGd,SAAS,CAACsB,KAAK,CAACI,QAAQ,EAAE,EAAEd,QAAQ,CAAC;YAC9DG,mBAAmB,CAACD,gBAAgB,CAAC;UACvC;QACF,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE,CAACP,OAAO,EAAEM,OAAO,EAAED,QAAQ,EAAEP,QAAQ,CAACoB,IAAI,EAAEhB,SAAS,CAAC,CAAC;EAE1D,MAAMkB,OAAO,GAAG,CACb,8BAA6B1B,WAAW,CAACa,gBAAgB,CAAE,IAAGH,MAAO,GAAE,CACzE;EAED,OAAO,KAAC,WAAW;IAAC,YAAY,EAAEL,YAAa;IAAC,OAAO,EAAEqB;EAAQ,EAAG;AACtE;AAAC,GA9BevB,OAAO;EAAA,QACDV,YAAY,EAEdK,mBAAmB;AAAA;AAAA,KAHvBK,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}