{"ast":null,"code":"const createStoreImpl = createState => {\n  let state;\n  const listeners = /* @__PURE__ */new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(listener => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribe = listener => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n      console.warn(\"[DEPRECATED] The destroy method will be unsupported in the future version. You should use unsubscribe function returned by subscribe. Everything will be garbage collected if store is garbage collected.\");\n    }\n    listeners.clear();\n  };\n  const api = {\n    setState,\n    getState,\n    subscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = createState => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = createState => {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n    console.warn(\"[DEPRECATED] default export is deprecated, instead import { createStore } ...\");\n  }\n  return createStore(createState);\n};\nexport { createStore, vanilla as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}