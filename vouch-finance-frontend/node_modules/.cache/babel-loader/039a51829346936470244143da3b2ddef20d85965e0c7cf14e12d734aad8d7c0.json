{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport { decorateProperty } from './base.js';\nimport { queryAssignedElements } from './query-assigned-elements.js';\nexport function queryAssignedNodes(slotOrOptions, flatten, selector) {\n  // Normalize the overloaded arguments.\n  let slot = slotOrOptions;\n  let assignedNodesOptions;\n  if (typeof slotOrOptions === 'object') {\n    slot = slotOrOptions.slot;\n    assignedNodesOptions = slotOrOptions;\n  } else {\n    assignedNodesOptions = {\n      flatten\n    };\n  }\n  // For backwards compatibility, queryAssignedNodes with a selector behaves\n  // exactly like queryAssignedElements with a selector.\n  if (selector) {\n    return queryAssignedElements({\n      slot: slot,\n      flatten,\n      selector\n    });\n  }\n  return decorateProperty({\n    descriptor: _name => ({\n      get() {\n        var _a, _b;\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(slotSelector);\n        return (_b = slotEl === null || slotEl === void 0 ? void 0 : slotEl.assignedNodes(assignedNodesOptions)) !== null && _b !== void 0 ? _b : [];\n      },\n      enumerable: true,\n      configurable: true\n    })\n  });\n}\n//# sourceMappingURL=query-assigned-nodes.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}