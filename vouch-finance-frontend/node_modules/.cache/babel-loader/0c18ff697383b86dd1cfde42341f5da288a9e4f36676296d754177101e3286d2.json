{"ast":null,"code":"module.exports = {\n  minBlockRef,\n  maxBlockRef,\n  sortBlockRefs,\n  bnToHex,\n  blockRefIsNumber,\n  hexToInt,\n  incrementHexInt,\n  intToHex,\n  unsafeRandomBytes\n};\nfunction minBlockRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  const sortedRefs = sortBlockRefs(refs);\n  return sortedRefs[0];\n}\nfunction maxBlockRef() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n  const sortedRefs = sortBlockRefs(refs);\n  return sortedRefs[sortedRefs.length - 1];\n}\nfunction sortBlockRefs(refs) {\n  return refs.sort((refA, refB) => {\n    if (refA === 'latest' || refB === 'earliest') return 1;\n    if (refB === 'latest' || refA === 'earliest') return -1;\n    return hexToInt(refA) - hexToInt(refB);\n  });\n}\nfunction bnToHex(bn) {\n  return '0x' + bn.toString(16);\n}\nfunction blockRefIsNumber(blockRef) {\n  return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef);\n}\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  const value = hexToInt(hexString);\n  return intToHex(value + 1);\n}\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int;\n  let hexString = int.toString(16);\n  const needsLeftPad = hexString.length % 2;\n  if (needsLeftPad) hexString = '0' + hexString;\n  return '0x' + hexString;\n}\nfunction unsafeRandomBytes(byteCount) {\n  let result = '0x';\n  for (let i = 0; i < byteCount; i++) {\n    result += unsafeRandomNibble();\n    result += unsafeRandomNibble();\n  }\n  return result;\n}\nfunction unsafeRandomNibble() {\n  return Math.floor(Math.random() * 16).toString(16);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}