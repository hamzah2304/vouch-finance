{"ast":null,"code":"import { isJsonRpcRequest, isJsonRpcResponseSuccess, isJsonRpcResponseError, isInternalEvent, isReservedEvent } from \"@walletconnect/utils\";\nclass EventManager {\n  constructor() {\n    this._eventEmitters = [];\n  }\n  subscribe(eventEmitter) {\n    this._eventEmitters.push(eventEmitter);\n  }\n  unsubscribe(event) {\n    this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);\n  }\n  trigger(payload) {\n    let eventEmitters = [];\n    let event;\n    if (isJsonRpcRequest(payload)) {\n      event = payload.method;\n    } else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {\n      event = `response:${payload.id}`;\n    } else if (isInternalEvent(payload)) {\n      event = payload.event;\n    } else {\n      event = \"\";\n    }\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);\n    }\n    if ((!eventEmitters || !eventEmitters.length) && !isReservedEvent(event) && !isInternalEvent(event)) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === \"call_request\");\n    }\n    eventEmitters.forEach(eventEmitter => {\n      if (isJsonRpcResponseError(payload)) {\n        const error = new Error(payload.error.message);\n        eventEmitter.callback(error, null);\n      } else {\n        eventEmitter.callback(null, payload);\n      }\n    });\n  }\n}\nexport default EventManager;\n//# sourceMappingURL=events.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}