{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmahmood/Downloads/ETHDenver/vouch-finance/vouch-finance-frontend/src/features/sdk/Lend/components/withdraw/Withdraw.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\nimport { HumaModal, HumaModalHeader } from '../../../../../components/humaModal';\nimport { useContractFunction } from '../../../../../hooks/useContractFunction';\nimport { useAppDispatch, useAppSelector } from '../../../../../hooks/useRedux';\nimport { isTxFailed } from '../../../../../utils/transaction';\nimport { ErrorModal } from '../../../components';\nimport { resetAfterSuccess, setWithdrawError } from '../../store/lend.reducers';\nimport { selectLendState } from '../../store/lend.selectors';\nimport { LEND_WITHDRAW_STEP } from '../../store/lend.store';\nimport { CheckingWithdrawable } from './CheckingWithdrawble';\nimport { ChooseAmount } from './ChooseAmount';\nimport { Success } from './Success';\nimport { Transfer } from './Transfer';\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport function Withdraw(_ref) {\n  _s();\n  let {\n    lenderPosition,\n    withdrawlLockoutSeconds,\n    poolInfo,\n    isOpen,\n    handleClose,\n    handleSuccess\n  } = _ref;\n  const dispatch = useAppDispatch();\n  const {\n    withdrawStep,\n    errorMessage,\n    withdrawAmount\n  } = useAppSelector(selectLendState);\n  const {\n    state,\n    failReason,\n    reset,\n    txReceipt\n  } = useContractFunction(state => state);\n  useEffect(() => {\n    if (isTxFailed(state) && failReason) {\n      dispatch(setWithdrawError(failReason));\n    }\n  }, [dispatch, failReason, state]);\n  useEffect(() => {\n    if (withdrawStep === LEND_WITHDRAW_STEP.Done && txReceipt) {\n      handleSuccess(txReceipt.blockNumber);\n    }\n  }, [handleSuccess, poolInfo.pool, txReceipt, withdrawAmount, withdrawStep]);\n  const handleCloseModal = useCallback(() => {\n    reset();\n    dispatch(resetAfterSuccess());\n    handleClose();\n  }, [dispatch, handleClose, reset]);\n\n  // when close modal, return null to make sure all the states are reset\n  if (!isOpen) {\n    return null;\n  }\n  return _jsxs(HumaModal, {\n    isOpen: isOpen,\n    overflowY: \"auto\",\n    onClose: handleCloseModal,\n    width: \"480px\",\n    padding: \"30px 40px\",\n    disableBackdropClick: true,\n    children: [_jsx(HumaModalHeader, {\n      onClose: handleCloseModal,\n      height: 0\n    }), withdrawStep === LEND_WITHDRAW_STEP.CheckingWithdrawable && _jsx(CheckingWithdrawable, {\n      poolInfo: poolInfo,\n      withdrawlLockoutSeconds: withdrawlLockoutSeconds,\n      handleCloseModal: handleCloseModal\n    }), withdrawStep === LEND_WITHDRAW_STEP.ChooseAmount && _jsx(ChooseAmount, {\n      lenderPosition: lenderPosition,\n      poolInfo: poolInfo\n    }), withdrawStep === LEND_WITHDRAW_STEP.TransferMoney && _jsx(Transfer, {\n      poolInfo: poolInfo\n    }), withdrawStep === LEND_WITHDRAW_STEP.Done && _jsx(Success, {\n      poolInfo: poolInfo,\n      handleAction: handleCloseModal\n    }), withdrawStep === LEND_WITHDRAW_STEP.Error && _jsx(ErrorModal, {\n      title: \"Withdraw\",\n      errorReason: \"Sorry there was an error\",\n      errorMessage: errorMessage,\n      handleOk: handleCloseModal\n    })]\n  });\n}\n_s(Withdraw, \"Ufeolr0F5hLFmWmpWufdAWAkSBc=\", false, function () {\n  return [useAppDispatch, useAppSelector, useContractFunction];\n});\n_c = Withdraw;\nvar _c;\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"names":["React","useCallback","useEffect","HumaModal","HumaModalHeader","useContractFunction","useAppDispatch","useAppSelector","isTxFailed","ErrorModal","resetAfterSuccess","setWithdrawError","selectLendState","LEND_WITHDRAW_STEP","CheckingWithdrawable","ChooseAmount","Success","Transfer","Withdraw","lenderPosition","withdrawlLockoutSeconds","poolInfo","isOpen","handleClose","handleSuccess","dispatch","withdrawStep","errorMessage","withdrawAmount","state","failReason","reset","txReceipt","Done","blockNumber","pool","handleCloseModal","TransferMoney","Error"],"sources":["/Users/hamzahmahmood/Downloads/ETHDenver/vouch-finance/vouch-finance-frontend/src/features/sdk/Lend/components/withdraw/Withdraw.tsx"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport React, { useCallback, useEffect } from 'react'\n\nimport { HumaModal, HumaModalHeader } from '../../../../../components/humaModal'\nimport { useContractFunction } from '../../../../../hooks/useContractFunction'\nimport { useAppDispatch, useAppSelector } from '../../../../../hooks/useRedux'\nimport { PoolInfoType } from '../../../../../utils/pool'\nimport { isTxFailed } from '../../../../../utils/transaction'\nimport { ErrorModal } from '../../../components'\nimport { resetAfterSuccess, setWithdrawError } from '../../store/lend.reducers'\nimport { selectLendState } from '../../store/lend.selectors'\nimport { LEND_WITHDRAW_STEP } from '../../store/lend.store'\nimport { CheckingWithdrawable } from './CheckingWithdrawble'\nimport { ChooseAmount } from './ChooseAmount'\nimport { Success } from './Success'\nimport { Transfer } from './Transfer'\n\ntype Props = {\n  lenderPosition: BigNumber | undefined\n  withdrawlLockoutSeconds: number | undefined\n  poolInfo: PoolInfoType\n  isOpen: boolean\n  handleClose: () => void\n  handleSuccess: (blockNumber: number) => void\n}\n\nexport function Withdraw({\n  lenderPosition,\n  withdrawlLockoutSeconds,\n  poolInfo,\n  isOpen,\n  handleClose,\n  handleSuccess,\n}: Props): React.ReactElement | null {\n  const dispatch = useAppDispatch()\n  const { withdrawStep, errorMessage, withdrawAmount } =\n    useAppSelector(selectLendState)\n  const { state, failReason, reset, txReceipt } = useContractFunction(\n    (state) => state,\n  )\n\n  useEffect(() => {\n    if (isTxFailed(state) && failReason) {\n      dispatch(setWithdrawError(failReason))\n    }\n  }, [dispatch, failReason, state])\n\n  useEffect(() => {\n    if (withdrawStep === LEND_WITHDRAW_STEP.Done && txReceipt) {\n      handleSuccess(txReceipt.blockNumber)\n    }\n  }, [handleSuccess, poolInfo.pool, txReceipt, withdrawAmount, withdrawStep])\n\n  const handleCloseModal = useCallback(() => {\n    reset()\n    dispatch(resetAfterSuccess())\n    handleClose()\n  }, [dispatch, handleClose, reset])\n\n  // when close modal, return null to make sure all the states are reset\n  if (!isOpen) {\n    return null\n  }\n\n  return (\n    <HumaModal\n      isOpen={isOpen}\n      overflowY='auto'\n      onClose={handleCloseModal}\n      width='480px'\n      padding='30px 40px'\n      disableBackdropClick\n    >\n      <HumaModalHeader onClose={handleCloseModal} height={0} />\n      {withdrawStep === LEND_WITHDRAW_STEP.CheckingWithdrawable && (\n        <CheckingWithdrawable\n          poolInfo={poolInfo}\n          withdrawlLockoutSeconds={withdrawlLockoutSeconds}\n          handleCloseModal={handleCloseModal}\n        />\n      )}\n      {withdrawStep === LEND_WITHDRAW_STEP.ChooseAmount && (\n        <ChooseAmount lenderPosition={lenderPosition!} poolInfo={poolInfo} />\n      )}\n      {withdrawStep === LEND_WITHDRAW_STEP.TransferMoney && (\n        <Transfer poolInfo={poolInfo} />\n      )}\n      {withdrawStep === LEND_WITHDRAW_STEP.Done && (\n        <Success poolInfo={poolInfo} handleAction={handleCloseModal} />\n      )}\n      {withdrawStep === LEND_WITHDRAW_STEP.Error && (\n        <ErrorModal\n          title='Withdraw'\n          errorReason='Sorry there was an error'\n          errorMessage={errorMessage}\n          handleOk={handleCloseModal}\n        />\n      )}\n    </HumaModal>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}