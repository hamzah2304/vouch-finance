{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport { calculateTickByMacroScore, macroScoreColors } from \"../../utils/ticks\";\nimport ScoreCircularProgress from \"../ScoreCircularProgress\";\nimport Gauge from \"./Gauge\";\nimport * as SC from \"./ScoreGauge.styles\";\nconst ScoreGauge = _ref => {\n  let {\n    score,\n    size = 140,\n    updatedAt,\n    showGrade,\n    onPreview\n  } = _ref;\n  const [circleColor, setCircleColor] = useState();\n  const [tick, setTick] = useState(0);\n  useEffect(() => {\n    const finalScore = score === null || (score === null || score === void 0 ? void 0 : score.toString()) === \"0\" ? localStorage.getItem(\"score\") : score;\n    if (!finalScore) return;\n    const tickValue = calculateTickByMacroScore(+finalScore);\n    setTick(tickValue);\n    const colors = macroScoreColors;\n    setCircleColor(colors[tickValue - 1] || macroScoreColors[0]);\n  }, [score]);\n  const grade = \"FEDCBA\"[tick];\n  const fallback = navigator.userAgent.includes(\"Safari\") && !navigator.userAgent.includes(\"Chrome\") || /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor);\n  return React.createElement(SC.WrapperHover, {\n    size: size,\n    showGrade: showGrade\n  }, React.createElement(SC.Wrapper, {\n    showGrade: showGrade\n  }, React.createElement(SC.Container, null, fallback ? React.createElement(ScoreCircularProgress, {\n    score: score,\n    width: \"140px\",\n    height: \"140px\",\n    strokeWidth: 8\n  }) : React.createElement(React.Fragment, null, React.createElement(Gauge, {\n    size: size,\n    score: score,\n    grade: grade,\n    gradeColor: circleColor\n  })), updatedAt && React.createElement(SC.DateChip, null, new Intl.DateTimeFormat(\"en-uk\", {\n    dateStyle: \"medium\"\n  }).format(new Date(updatedAt)).replace(\" 20\", \" \")))));\n};\nexport default ScoreGauge;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}