{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RxWebSocket = exports.ConnectionState = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nvar ConnectionState;\n(function (ConnectionState) {\n  ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n  ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n  ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\n/**\n * Rx-ified WebSocket\n */\nclass RxWebSocket {\n  /**\n   * Constructor\n   * @param url WebSocket server URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  constructor(url) {\n    let WebSocketClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebSocket;\n    this.WebSocketClass = WebSocketClass;\n    this.webSocket = null;\n    this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\n    this.incomingDataSubject = new rxjs_1.Subject();\n    this.url = url.replace(/^http/, \"ws\");\n  }\n  /**\n   * Make a websocket connection\n   * @returns an Observable that completes when connected\n   */\n  connect() {\n    if (this.webSocket) {\n      return (0, rxjs_1.throwError)(new Error(\"webSocket object is not null\"));\n    }\n    return new rxjs_1.Observable(obs => {\n      let webSocket;\n      try {\n        this.webSocket = webSocket = new this.WebSocketClass(this.url);\n      } catch (err) {\n        obs.error(err);\n        return;\n      }\n      this.connectionStateSubject.next(ConnectionState.CONNECTING);\n      webSocket.onclose = evt => {\n        this.clearWebSocket();\n        obs.error(new Error(`websocket error ${evt.code}: ${evt.reason}`));\n        this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n      };\n      webSocket.onopen = _ => {\n        obs.next();\n        obs.complete();\n        this.connectionStateSubject.next(ConnectionState.CONNECTED);\n      };\n      webSocket.onmessage = evt => {\n        this.incomingDataSubject.next(evt.data);\n      };\n    }).pipe((0, operators_1.take)(1));\n  }\n  /**\n   * Disconnect from server\n   */\n  disconnect() {\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      return;\n    }\n    this.clearWebSocket();\n    this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n    try {\n      webSocket.close();\n    } catch (_a) {}\n  }\n  /**\n   * Emit current connection state and subsequent changes\n   * @returns an Observable for the connection state\n   */\n  get connectionState$() {\n    return this.connectionStateSubject.asObservable();\n  }\n  /**\n   * Emit incoming data from server\n   * @returns an Observable for the data received\n   */\n  get incomingData$() {\n    return this.incomingDataSubject.asObservable();\n  }\n  /**\n   * Emit incoming JSON data from server. non-JSON data are ignored\n   * @returns an Observable for parsed JSON data\n   */\n  get incomingJSONData$() {\n    return this.incomingData$.pipe((0, operators_1.flatMap)(m => {\n      let j;\n      try {\n        j = JSON.parse(m);\n      } catch (err) {\n        return (0, rxjs_1.empty)();\n      }\n      return (0, rxjs_1.of)(j);\n    }));\n  }\n  /**\n   * Send data to server\n   * @param data text to send\n   */\n  sendData(data) {\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      throw new Error(\"websocket is not connected\");\n    }\n    webSocket.send(data);\n  }\n  clearWebSocket() {\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      return;\n    }\n    this.webSocket = null;\n    webSocket.onclose = null;\n    webSocket.onerror = null;\n    webSocket.onmessage = null;\n    webSocket.onopen = null;\n  }\n}\nexports.RxWebSocket = RxWebSocket;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}