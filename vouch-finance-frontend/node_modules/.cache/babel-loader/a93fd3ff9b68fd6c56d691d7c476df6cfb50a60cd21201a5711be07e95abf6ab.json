{"ast":null,"code":"import moment from 'moment';\nimport { isEmpty } from './common';\nexport const MILLISECONDS = 1000;\nexport const DAY_SECONDS = 24 * 60 * 60;\nexport const TIME_FORMAT_LL = 'll';\nexport const timestampToStr = (timestamp, format) => moment.unix(timestamp).format(format);\n\n/**\n * Convert timestamp to format ll: Nov 12, 2022\n *\n * @param timestamp\n * @returns format ll: Nov 12, 2022\n */\nexport const timestampToLL = timestamp => {\n  if (!timestamp) {\n    return '';\n  }\n  return timestampToStr(timestamp, TIME_FORMAT_LL);\n};\n\n/**\n * get unix time in seconds\n *\n * @returns timestamp\n */\nexport const getUnixTimestamp = date => {\n  if (date) {\n    return date.unix();\n  }\n  return Math.floor(Date.now() / MILLISECONDS);\n};\nexport const secondsToDays = seconds => {\n  if (isEmpty(seconds)) {\n    return 0;\n  }\n  try {\n    return seconds / DAY_SECONDS;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error) {\n    console.error(error);\n    return 0;\n  }\n};\n\n// eslint-disable-next-line no-promise-executor-return\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\nconst timeUtil = {\n  timestampToStr,\n  timestampToLL,\n  getUnixTimestamp,\n  secondsToDays,\n  sleep\n};\nexport default timeUtil;","map":{"version":3,"names":["moment","isEmpty","MILLISECONDS","DAY_SECONDS","TIME_FORMAT_LL","timestampToStr","timestamp","format","unix","timestampToLL","getUnixTimestamp","date","Math","floor","Date","now","secondsToDays","seconds","error","console","sleep","ms","Promise","r","setTimeout","timeUtil"],"sources":["/Users/hamzahmahmood/Downloads/ETHDenver/huma-workshop/huma-demo-dapp/src/utils/time.ts"],"sourcesContent":["import moment from 'moment'\nimport { isEmpty } from './common'\n\nexport const MILLISECONDS = 1000\nexport const DAY_SECONDS = 24 * 60 * 60\nexport const TIME_FORMAT_LL = 'll'\n\nexport const timestampToStr = (timestamp: number, format: string) =>\n  moment.unix(timestamp).format(format)\n\n/**\n * Convert timestamp to format ll: Nov 12, 2022\n *\n * @param timestamp\n * @returns format ll: Nov 12, 2022\n */\nexport const timestampToLL = (timestamp?: number) => {\n  if (!timestamp) {\n    return ''\n  }\n  return timestampToStr(timestamp, TIME_FORMAT_LL)\n}\n\n/**\n * get unix time in seconds\n *\n * @returns timestamp\n */\nexport const getUnixTimestamp = (date?: moment.Moment) => {\n  if (date) {\n    return date.unix()\n  }\n  return Math.floor(Date.now() / MILLISECONDS)\n}\n\nexport const secondsToDays = (seconds: number | undefined) => {\n  if (isEmpty(seconds)) {\n    return 0\n  }\n  try {\n    return seconds! / DAY_SECONDS\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    console.error(error)\n    return 0\n  }\n}\n\n// eslint-disable-next-line no-promise-executor-return\nconst sleep = (ms: number) => new Promise((r) => setTimeout(r, ms))\n\nconst timeUtil = {\n  timestampToStr,\n  timestampToLL,\n  getUnixTimestamp,\n  secondsToDays,\n  sleep,\n}\n\nexport default timeUtil\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,SAASC,OAAO,QAAQ,UAAU;AAElC,OAAO,MAAMC,YAAY,GAAG,IAAI;AAChC,OAAO,MAAMC,WAAW,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACvC,OAAO,MAAMC,cAAc,GAAG,IAAI;AAElC,OAAO,MAAMC,cAAc,GAAG,CAACC,SAAiB,EAAEC,MAAc,KAC9DP,MAAM,CAACQ,IAAI,CAACF,SAAS,CAAC,CAACC,MAAM,CAACA,MAAM,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAIH,SAAkB,IAAK;EACnD,IAAI,CAACA,SAAS,EAAE;IACd,OAAO,EAAE;EACX;EACA,OAAOD,cAAc,CAACC,SAAS,EAAEF,cAAc,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,gBAAgB,GAAIC,IAAoB,IAAK;EACxD,IAAIA,IAAI,EAAE;IACR,OAAOA,IAAI,CAACH,IAAI,EAAE;EACpB;EACA,OAAOI,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,EAAE,GAAGb,YAAY,CAAC;AAC9C,CAAC;AAED,OAAO,MAAMc,aAAa,GAAIC,OAA2B,IAAK;EAC5D,IAAIhB,OAAO,CAACgB,OAAO,CAAC,EAAE;IACpB,OAAO,CAAC;EACV;EACA,IAAI;IACF,OAAOA,OAAO,GAAId,WAAW;IAC7B;EACF,CAAC,CAAC,OAAOe,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,CAAC;EACV;AACF,CAAC;;AAED;AACA,MAAME,KAAK,GAAIC,EAAU,IAAK,IAAIC,OAAO,CAAEC,CAAC,IAAKC,UAAU,CAACD,CAAC,EAAEF,EAAE,CAAC,CAAC;AAEnE,MAAMI,QAAQ,GAAG;EACfpB,cAAc;EACdI,aAAa;EACbC,gBAAgB;EAChBM,aAAa;EACbI;AACF,CAAC;AAED,eAAeK,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}