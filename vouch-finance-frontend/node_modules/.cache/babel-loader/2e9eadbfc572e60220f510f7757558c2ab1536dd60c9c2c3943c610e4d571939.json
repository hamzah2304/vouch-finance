{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const legacyPrototypeMethod = (descriptor, proto, name) => {\n  Object.defineProperty(proto, name, descriptor);\n};\nexport const standardPrototypeMethod = (descriptor, element) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor\n});\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport const decorateProperty = _ref => {\n  let {\n    finisher,\n    descriptor\n  } = _ref;\n  return (protoOrDescriptor, name\n  // Note TypeScript requires the return type to be `void|any`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) => {\n    var _a;\n    // TypeScript / Babel legacy mode\n    if (name !== undefined) {\n      const ctor = protoOrDescriptor.constructor;\n      if (descriptor !== undefined) {\n        Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n      }\n      finisher === null || finisher === void 0 ? void 0 : finisher(ctor, name);\n      // Babel standard mode\n    } else {\n      // Note, the @property decorator saves `key` as `originalKey`\n      // so try to use it here.\n      const key =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (_a = protoOrDescriptor.originalKey) !== null && _a !== void 0 ? _a : protoOrDescriptor.key;\n      const info = descriptor != undefined ? {\n        kind: 'method',\n        placement: 'prototype',\n        key,\n        descriptor: descriptor(protoOrDescriptor.key)\n      } : {\n        ...protoOrDescriptor,\n        key\n      };\n      if (finisher != undefined) {\n        info.finisher = function (ctor) {\n          finisher(ctor, key);\n        };\n      }\n      return info;\n    }\n  };\n};\n//# sourceMappingURL=base.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}