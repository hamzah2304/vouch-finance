{"ast":null,"code":"var _a, _b;\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport { CoreProvider } from \"@spectral-finance/react-core\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { SpectralDialog } from \"../components/SpectralDialog\";\nimport \"../styles/variables.css\";\nimport { DialogStepsProvider } from \"./DialogStepsContext\";\n// Onboard deps\nimport coinbaseWalletModule from \"@web3-onboard/coinbase\";\nimport gnosisModule from \"@web3-onboard/gnosis\";\nimport magicModule from \"@web3-onboard/magic\";\nimport portisModule from \"@web3-onboard/portis\";\nimport walletConnectModule from \"@web3-onboard/walletconnect\";\nimport walletLinkModule from \"@web3-onboard/walletlink\";\n// Onboard config\nconst gnosis = gnosisModule();\nconst portis = portisModule({\n  apiKey: \"813b1b13-7b65-45ab-a4ed-e1350a0ec2eb\"\n});\nconst walletConnect = walletConnectModule();\nconst coinbaseWalletSdk = coinbaseWalletModule();\nconst walletLink = walletLinkModule();\n// Magic\nconst magic = magicModule({\n  apiKey: \"pk_live_2954BFCDC2B75C31\",\n  userEmail: ((_b = (_a = localStorage.getItem(\"magicUserEmail\")) === null || _a === void 0 ? void 0 : _a.match(/.+@.+/)) === null || _b === void 0 ? void 0 : _b[0]) || undefined\n});\n// const saveMagicEmail = ({ instance }: any) =>\n//   (async () => {\n//     const { email } = await instance.user.getMetadata();\n//     localStorage.setItem(\"magicUserEmail\", email);\n//   })().catch(() => {});\nconst supportedWallets = [gnosis, portis, walletConnect, coinbaseWalletSdk, walletLink, magic];\n// This should be based on .ENV\nconst VARIABLES = {\n  alchemy: `https://eth-mainnet.g.alchemy.com/v2/6oTZOLvBDLNQM3_6ZIy-l_7h5n5xdb4D`,\n  infura: `https://mainnet.infura.io/v3/315346d7de824f2da8986c159afdb4d6`,\n  chainid: \"421613\",\n  contract: \"0x91e1156d5Fba6b1B251f396e96aFAaCE91394283\",\n  backendurl: \"https://sdk.dev.spectral.finance/api/v1\"\n};\nconst SpectralContext = createContext({});\nconst SpectralProvider = _ref => {\n  let {\n    logo,\n    partnerId,\n    children\n  } = _ref;\n  const [openDialog, setOpenDialog] = useState(false);\n  const [score, setScore] = useState(0);\n  const ALCHEMY_PROVIDER = VARIABLES.alchemy;\n  const providersLoader = {\n    mainnetProvider: () => new JsonRpcProvider(ALCHEMY_PROVIDER),\n    altMainnetProvider: () => new JsonRpcProvider(VARIABLES.infura)\n  };\n  const start = () => {\n    setOpenDialog(true);\n  };\n  const close = () => {\n    setOpenDialog(false);\n  };\n  const onScoreComputed = score => {\n    console.log(\"Score calculated and returned to partner\", score);\n    setScore(score);\n  };\n  if (!partnerId || !logo) {\n    console.error(\"Please verify that you set up `partnerId` and `logo` keys, otherwise the process will fail.\");\n  }\n  return React.createElement(SpectralContext.Provider, {\n    value: {\n      start,\n      close,\n      score\n    }\n  }, children, openDialog && React.createElement(CoreProvider, {\n    config: {\n      chainId: VARIABLES.chainid,\n      nfcContract: VARIABLES.contract,\n      providersLoader,\n      supportedWallets,\n      backendUrl: VARIABLES.backendurl,\n      partner: partnerId\n    }\n  }, React.createElement(DialogStepsProvider, null, React.createElement(SpectralDialog, {\n    partnerLogo: logo,\n    onScoreComputed: onScoreComputed\n  }))));\n};\nexport const useSpectral = () => useContext(SpectralContext);\nexport { SpectralProvider };\n//# sourceMappingURL=SpectralContext.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}