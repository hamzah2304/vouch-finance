{"ast":null,"code":"import create from 'zustand';\nimport { getTransactionErrorFromError, getTransactionErrorFromHash, increaseGasLimit, TxStateType } from '../utils/transaction';\nexport const useContractFunction = create(set => ({\n  state: TxStateType.New,\n  txHash: '',\n  txReceipt: undefined,\n  loading: false,\n  failReason: '',\n  setState: newState => set(() => ({\n    state: newState\n  })),\n  reset: () => set({\n    state: TxStateType.New,\n    txHash: '',\n    loading: false,\n    failReason: '',\n    txReceipt: undefined\n  }),\n  send: async (contract, method, parameters, provider) => {\n    try {\n      set({\n        state: TxStateType.GasEstimating,\n        loading: true\n      });\n      const gasLimit = await contract.estimateGas[method](...parameters);\n      set({\n        state: TxStateType.Signing\n      });\n      const tx = await contract[method](...parameters, {\n        gasLimit: increaseGasLimit(gasLimit)\n      });\n      set({\n        state: TxStateType.Confirming\n      });\n      set({\n        txHash: tx.hash\n      });\n      const txReceipt = await tx.wait();\n      set({\n        txReceipt\n      });\n\n      // tx was mined successfully\n      if (txReceipt.status === 1) {\n        set({\n          state: TxStateType.Success,\n          loading: false\n        });\n      } else {\n        let failReason = 'Send transaction failed';\n        if (provider) {\n          const failReasonReturned = await getTransactionErrorFromHash(provider, tx.hash);\n          if (failReasonReturned) {\n            failReason = failReasonReturned;\n          }\n        }\n        set({\n          state: TxStateType.Failed,\n          loading: false,\n          failReason\n        });\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e) {\n      console.error(e);\n      const contractErrorMessage = getTransactionErrorFromError(e);\n      if (contractErrorMessage) {\n        set({\n          state: TxStateType.Failed,\n          loading: false,\n          failReason: contractErrorMessage\n        });\n        return;\n      }\n      if (e.code === 4001 || e.code === 'ACTION_REJECTED') {\n        set({\n          state: TxStateType.Denied,\n          loading: false,\n          failReason: 'User has rejected the transaction'\n        });\n        return;\n      }\n      set({\n        state: TxStateType.Invalid,\n        loading: false,\n        failReason: e.reason || `Send transaction failed`\n      });\n    }\n  }\n}));","map":{"version":3,"names":["create","getTransactionErrorFromError","getTransactionErrorFromHash","increaseGasLimit","TxStateType","useContractFunction","set","state","New","txHash","txReceipt","undefined","loading","failReason","setState","newState","reset","send","contract","method","parameters","provider","GasEstimating","gasLimit","estimateGas","Signing","tx","Confirming","hash","wait","status","Success","failReasonReturned","Failed","e","console","error","contractErrorMessage","code","Denied","Invalid","reason"],"sources":["/Users/hamzahmahmood/Downloads/ETHDenver/huma-workshop/huma-demo-dapp/src/hooks/useContractFunction.ts"],"sourcesContent":["import { Contract, ContractReceipt } from '@ethersproject/contracts'\nimport {\n  TransactionReceipt,\n  TransactionResponse,\n  Web3Provider,\n} from '@ethersproject/providers'\nimport create from 'zustand'\n\nimport {\n  getTransactionErrorFromError,\n  getTransactionErrorFromHash,\n  increaseGasLimit,\n  TxStateType,\n} from '../utils/transaction'\n\ninterface TxStateManagement {\n  state: TxStateType\n  txHash: string\n  txReceipt: ContractReceipt | undefined\n  loading: boolean\n  failReason: string\n  setState: (state: TxStateType) => void\n  reset: () => void\n  send: (\n    contract: Contract,\n    method: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parameters: any[],\n    provider: Web3Provider | undefined,\n  ) => Promise<void>\n}\n\nexport const useContractFunction = create<TxStateManagement>((set) => ({\n  state: TxStateType.New,\n  txHash: '',\n  txReceipt: undefined,\n  loading: false,\n  failReason: '',\n  setState: (newState) => set(() => ({ state: newState })),\n  reset: () =>\n    set({\n      state: TxStateType.New,\n      txHash: '',\n      loading: false,\n      failReason: '',\n      txReceipt: undefined,\n    }),\n  send: async (contract, method, parameters, provider) => {\n    try {\n      set({ state: TxStateType.GasEstimating, loading: true })\n      const gasLimit = await contract.estimateGas[method](...parameters)\n      set({ state: TxStateType.Signing })\n      const tx: TransactionResponse = await contract[method](...parameters, {\n        gasLimit: increaseGasLimit(gasLimit),\n      })\n      set({ state: TxStateType.Confirming })\n      set({ txHash: tx.hash })\n\n      const txReceipt: TransactionReceipt = await tx.wait()\n      set({ txReceipt })\n\n      // tx was mined successfully\n      if (txReceipt.status === 1) {\n        set({ state: TxStateType.Success, loading: false })\n      } else {\n        let failReason = 'Send transaction failed'\n        if (provider) {\n          const failReasonReturned = await getTransactionErrorFromHash(\n            provider,\n            tx.hash,\n          )\n          if (failReasonReturned) {\n            failReason = failReasonReturned\n          }\n        }\n        set({ state: TxStateType.Failed, loading: false, failReason })\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any) {\n      console.error(e)\n      const contractErrorMessage = getTransactionErrorFromError(e)\n      if (contractErrorMessage) {\n        set({\n          state: TxStateType.Failed,\n          loading: false,\n          failReason: contractErrorMessage,\n        })\n        return\n      }\n\n      if (e.code === 4001 || e.code === 'ACTION_REJECTED') {\n        set({\n          state: TxStateType.Denied,\n          loading: false,\n          failReason: 'User has rejected the transaction',\n        })\n        return\n      }\n\n      set({\n        state: TxStateType.Invalid,\n        loading: false,\n        failReason: e.reason || `Send transaction failed`,\n      })\n    }\n  },\n}))\n"],"mappings":"AAMA,OAAOA,MAAM,MAAM,SAAS;AAE5B,SACEC,4BAA4B,EAC5BC,2BAA2B,EAC3BC,gBAAgB,EAChBC,WAAW,QACN,sBAAsB;AAmB7B,OAAO,MAAMC,mBAAmB,GAAGL,MAAM,CAAqBM,GAAG,KAAM;EACrEC,KAAK,EAAEH,WAAW,CAACI,GAAG;EACtBC,MAAM,EAAE,EAAE;EACVC,SAAS,EAAEC,SAAS;EACpBC,OAAO,EAAE,KAAK;EACdC,UAAU,EAAE,EAAE;EACdC,QAAQ,EAAGC,QAAQ,IAAKT,GAAG,CAAC,OAAO;IAAEC,KAAK,EAAEQ;EAAS,CAAC,CAAC,CAAC;EACxDC,KAAK,EAAE,MACLV,GAAG,CAAC;IACFC,KAAK,EAAEH,WAAW,CAACI,GAAG;IACtBC,MAAM,EAAE,EAAE;IACVG,OAAO,EAAE,KAAK;IACdC,UAAU,EAAE,EAAE;IACdH,SAAS,EAAEC;EACb,CAAC,CAAC;EACJM,IAAI,EAAE,OAAOC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,EAAEC,QAAQ,KAAK;IACtD,IAAI;MACFf,GAAG,CAAC;QAAEC,KAAK,EAAEH,WAAW,CAACkB,aAAa;QAAEV,OAAO,EAAE;MAAK,CAAC,CAAC;MACxD,MAAMW,QAAQ,GAAG,MAAML,QAAQ,CAACM,WAAW,CAACL,MAAM,CAAC,CAAC,GAAGC,UAAU,CAAC;MAClEd,GAAG,CAAC;QAAEC,KAAK,EAAEH,WAAW,CAACqB;MAAQ,CAAC,CAAC;MACnC,MAAMC,EAAuB,GAAG,MAAMR,QAAQ,CAACC,MAAM,CAAC,CAAC,GAAGC,UAAU,EAAE;QACpEG,QAAQ,EAAEpB,gBAAgB,CAACoB,QAAQ;MACrC,CAAC,CAAC;MACFjB,GAAG,CAAC;QAAEC,KAAK,EAAEH,WAAW,CAACuB;MAAW,CAAC,CAAC;MACtCrB,GAAG,CAAC;QAAEG,MAAM,EAAEiB,EAAE,CAACE;MAAK,CAAC,CAAC;MAExB,MAAMlB,SAA6B,GAAG,MAAMgB,EAAE,CAACG,IAAI,EAAE;MACrDvB,GAAG,CAAC;QAAEI;MAAU,CAAC,CAAC;;MAElB;MACA,IAAIA,SAAS,CAACoB,MAAM,KAAK,CAAC,EAAE;QAC1BxB,GAAG,CAAC;UAAEC,KAAK,EAAEH,WAAW,CAAC2B,OAAO;UAAEnB,OAAO,EAAE;QAAM,CAAC,CAAC;MACrD,CAAC,MAAM;QACL,IAAIC,UAAU,GAAG,yBAAyB;QAC1C,IAAIQ,QAAQ,EAAE;UACZ,MAAMW,kBAAkB,GAAG,MAAM9B,2BAA2B,CAC1DmB,QAAQ,EACRK,EAAE,CAACE,IAAI,CACR;UACD,IAAII,kBAAkB,EAAE;YACtBnB,UAAU,GAAGmB,kBAAkB;UACjC;QACF;QACA1B,GAAG,CAAC;UAAEC,KAAK,EAAEH,WAAW,CAAC6B,MAAM;UAAErB,OAAO,EAAE,KAAK;UAAEC;QAAW,CAAC,CAAC;MAChE;MACA;IACF,CAAC,CAAC,OAAOqB,CAAM,EAAE;MACfC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MAChB,MAAMG,oBAAoB,GAAGpC,4BAA4B,CAACiC,CAAC,CAAC;MAC5D,IAAIG,oBAAoB,EAAE;QACxB/B,GAAG,CAAC;UACFC,KAAK,EAAEH,WAAW,CAAC6B,MAAM;UACzBrB,OAAO,EAAE,KAAK;UACdC,UAAU,EAAEwB;QACd,CAAC,CAAC;QACF;MACF;MAEA,IAAIH,CAAC,CAACI,IAAI,KAAK,IAAI,IAAIJ,CAAC,CAACI,IAAI,KAAK,iBAAiB,EAAE;QACnDhC,GAAG,CAAC;UACFC,KAAK,EAAEH,WAAW,CAACmC,MAAM;UACzB3B,OAAO,EAAE,KAAK;UACdC,UAAU,EAAE;QACd,CAAC,CAAC;QACF;MACF;MAEAP,GAAG,CAAC;QACFC,KAAK,EAAEH,WAAW,CAACoC,OAAO;QAC1B5B,OAAO,EAAE,KAAK;QACdC,UAAU,EAAEqB,CAAC,CAACO,MAAM,IAAK;MAC3B,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}