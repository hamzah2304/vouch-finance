{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmahmood/Downloads/ETHDenver/huma-workshop/huma-demo-dapp/src/features/borrow/components/BorrowPools/BorrowCreditLinePool.tsx\",\n  _s = $RefreshSig$();\nimport { Button } from '@mui/material';\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { PoolInfo } from '../../../../components/layout/PoolInfo';\nimport { useCLPoolBalance, useCLPoolUnderlyingToken } from '../../../../hooks/useCLPoolContract';\nimport { useMQ } from '../../../../hooks/useMQ';\nimport { routes } from '../../../../Router';\nimport { isEmpty } from '../../../../utils/common';\nimport { downScale, formatMoney } from '../../../../utils/number';\nimport { PoolMap } from '../../../../utils/pool';\nimport { ConnectWalletButton } from '../../../wallet/components';\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport function BorrowCreditLinePool(_ref) {\n  _s();\n  let {\n    poolName\n  } = _ref;\n  const {\n    isActive\n  } = useWeb3React();\n  const {\n    decimals\n  } = useCLPoolUnderlyingToken(poolName);\n  const [creditLinePoolBalance] = useCLPoolBalance(poolName);\n  const {\n    isXsSize\n  } = useMQ();\n  const items = useMemo(() => {\n    const poolBalanceItem = {\n      id: 'credit-line-pool-balance',\n      title: 'Liquidity',\n      value: isActive && !isEmpty(creditLinePoolBalance) ? formatMoney(downScale(creditLinePoolBalance, decimals)) : '--',\n      isLoading: isActive && isEmpty(creditLinePoolBalance)\n    };\n    return [poolBalanceItem];\n  }, [creditLinePoolBalance, decimals, isActive]);\n  const buttons = useMemo(() => {\n    if (!isActive) {\n      return [_jsx(ConnectWalletButton, {\n        text: \"CONNECT YOUR WALLET\",\n        variant: \"contained\"\n      })];\n    }\n    return [_jsx(Button, {\n      variant: \"contained\",\n      component: Link,\n      to: `${routes.borrowCreditLine.path}?poolName=${poolName}`,\n      children: \"CHECK YOUR CREDIT LINE\"\n    })];\n  }, [isActive, poolName]);\n  return _jsx(PoolInfo, {\n    id: \"credit-line-pool-borrow\",\n    title: \"Credit Lines\",\n    description: PoolMap.CreditLine[poolName].borrowDesc,\n    items: items,\n    buttons: buttons,\n    buttonWidth: 255,\n    infoOneRow: !isXsSize\n  });\n}\n_s(BorrowCreditLinePool, \"RgO3BGPowHCoH5ZWOSKXOYWcmSQ=\", false, function () {\n  return [useWeb3React, useCLPoolUnderlyingToken, useCLPoolBalance, useMQ];\n});\n_c = BorrowCreditLinePool;\nvar _c;\n$RefreshReg$(_c, \"BorrowCreditLinePool\");","map":{"version":3,"names":["Button","useWeb3React","React","useMemo","Link","PoolInfo","useCLPoolBalance","useCLPoolUnderlyingToken","useMQ","routes","isEmpty","downScale","formatMoney","PoolMap","ConnectWalletButton","BorrowCreditLinePool","poolName","isActive","decimals","creditLinePoolBalance","isXsSize","items","poolBalanceItem","id","title","value","isLoading","buttons","borrowCreditLine","path","CreditLine","borrowDesc"],"sources":["/Users/hamzahmahmood/Downloads/ETHDenver/huma-workshop/huma-demo-dapp/src/features/borrow/components/BorrowPools/BorrowCreditLinePool.tsx"],"sourcesContent":["import { Button } from '@mui/material'\nimport { useWeb3React } from '@web3-react/core'\nimport React, { useMemo } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { PoolInfo } from '../../../../components/layout/PoolInfo'\nimport {\n  useCLPoolBalance,\n  useCLPoolUnderlyingToken,\n} from '../../../../hooks/useCLPoolContract'\nimport { useMQ } from '../../../../hooks/useMQ'\nimport { routes } from '../../../../Router'\nimport { isEmpty } from '../../../../utils/common'\nimport { downScale, formatMoney } from '../../../../utils/number'\nimport { POOL_NAME, PoolMap } from '../../../../utils/pool'\nimport { ConnectWalletButton } from '../../../wallet/components'\n\ntype Props = {\n  poolName: POOL_NAME\n}\n\nexport function BorrowCreditLinePool({ poolName }: Props): React.ReactElement {\n  const { isActive } = useWeb3React()\n  const { decimals } = useCLPoolUnderlyingToken(poolName)\n  const [creditLinePoolBalance] = useCLPoolBalance(poolName)\n  const { isXsSize } = useMQ()\n\n  const items = useMemo(() => {\n    const poolBalanceItem = {\n      id: 'credit-line-pool-balance',\n      title: 'Liquidity',\n      value:\n        isActive && !isEmpty(creditLinePoolBalance)\n          ? formatMoney(downScale(creditLinePoolBalance!, decimals))\n          : '--',\n      isLoading: isActive && isEmpty(creditLinePoolBalance),\n    }\n    return [poolBalanceItem]\n  }, [creditLinePoolBalance, decimals, isActive])\n\n  const buttons = useMemo(() => {\n    if (!isActive) {\n      return [\n        <ConnectWalletButton text='CONNECT YOUR WALLET' variant='contained' />,\n      ]\n    }\n    return [\n      <Button\n        variant='contained'\n        component={Link}\n        to={`${routes.borrowCreditLine.path}?poolName=${poolName}`}\n      >\n        CHECK YOUR CREDIT LINE\n      </Button>,\n    ]\n  }, [isActive, poolName])\n\n  return (\n    <PoolInfo\n      id='credit-line-pool-borrow'\n      title='Credit Lines'\n      description={PoolMap.CreditLine[poolName].borrowDesc}\n      items={items}\n      buttons={buttons}\n      buttonWidth={255}\n      infoOneRow={!isXsSize}\n    />\n  )\n}\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,SAASC,QAAQ,QAAQ,wCAAwC;AACjE,SACEC,gBAAgB,EAChBC,wBAAwB,QACnB,qCAAqC;AAC5C,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,OAAO,QAAQ,0BAA0B;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,0BAA0B;AACjE,SAAoBC,OAAO,QAAQ,wBAAwB;AAC3D,SAASC,mBAAmB,QAAQ,4BAA4B;AAAA;AAMhE,OAAO,SAASC,oBAAoB,OAA0C;EAAA;EAAA,IAAzC;IAAEC;EAAgB,CAAC;EACtD,MAAM;IAAEC;EAAS,CAAC,GAAGhB,YAAY,EAAE;EACnC,MAAM;IAAEiB;EAAS,CAAC,GAAGX,wBAAwB,CAACS,QAAQ,CAAC;EACvD,MAAM,CAACG,qBAAqB,CAAC,GAAGb,gBAAgB,CAACU,QAAQ,CAAC;EAC1D,MAAM;IAAEI;EAAS,CAAC,GAAGZ,KAAK,EAAE;EAE5B,MAAMa,KAAK,GAAGlB,OAAO,CAAC,MAAM;IAC1B,MAAMmB,eAAe,GAAG;MACtBC,EAAE,EAAE,0BAA0B;MAC9BC,KAAK,EAAE,WAAW;MAClBC,KAAK,EACHR,QAAQ,IAAI,CAACP,OAAO,CAACS,qBAAqB,CAAC,GACvCP,WAAW,CAACD,SAAS,CAACQ,qBAAqB,EAAGD,QAAQ,CAAC,CAAC,GACxD,IAAI;MACVQ,SAAS,EAAET,QAAQ,IAAIP,OAAO,CAACS,qBAAqB;IACtD,CAAC;IACD,OAAO,CAACG,eAAe,CAAC;EAC1B,CAAC,EAAE,CAACH,qBAAqB,EAAED,QAAQ,EAAED,QAAQ,CAAC,CAAC;EAE/C,MAAMU,OAAO,GAAGxB,OAAO,CAAC,MAAM;IAC5B,IAAI,CAACc,QAAQ,EAAE;MACb,OAAO,CACL,KAAC,mBAAmB;QAAC,IAAI,EAAC,qBAAqB;QAAC,OAAO,EAAC;MAAW,EAAG,CACvE;IACH;IACA,OAAO,CACL,KAAC,MAAM;MACL,OAAO,EAAC,WAAW;MACnB,SAAS,EAAEb,IAAK;MAChB,EAAE,EAAG,GAAEK,MAAM,CAACmB,gBAAgB,CAACC,IAAK,aAAYb,QAAS,EAAE;MAAA,UAC5D;IAED,EAAS,CACV;EACH,CAAC,EAAE,CAACC,QAAQ,EAAED,QAAQ,CAAC,CAAC;EAExB,OACE,KAAC,QAAQ;IACP,EAAE,EAAC,yBAAyB;IAC5B,KAAK,EAAC,cAAc;IACpB,WAAW,EAAEH,OAAO,CAACiB,UAAU,CAACd,QAAQ,CAAC,CAACe,UAAW;IACrD,KAAK,EAAEV,KAAM;IACb,OAAO,EAAEM,OAAQ;IACjB,WAAW,EAAE,GAAI;IACjB,UAAU,EAAE,CAACP;EAAS,EACtB;AAEN;AAAC,GA/CeL,oBAAoB;EAAA,QACbd,YAAY,EACZM,wBAAwB,EACbD,gBAAgB,EAC3BE,KAAK;AAAA;AAAA,KAJZO,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}