{"ast":null,"code":"const SafeEventEmitter = require('@metamask/safe-event-emitter').default;\nconst createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold');\nconst {\n  createAsyncMiddleware\n} = require('json-rpc-engine');\nconst createFilterMiddleware = require('./index.js');\nconst {\n  unsafeRandomBytes,\n  incrementHexInt\n} = require('./hexUtils.js');\nconst getBlocksForRange = require('./getBlocksForRange.js');\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware(_ref) {\n  let {\n    blockTracker,\n    provider\n  } = _ref;\n  // state and utilities for handling subscriptions\n  const subscriptions = {};\n  const filterManager = createFilterMiddleware({\n    blockTracker,\n    provider\n  });\n\n  // internal flag\n  let isDestroyed = false;\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter();\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n  });\n  middleware.destroy = destroy;\n  return {\n    events,\n    middleware\n  };\n  async function subscribe(req, res) {\n    if (isDestroyed) throw new Error('SubscriptionManager - attempting to use after destroying');\n    const subscriptionType = req.params[0];\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16);\n\n    // create sub\n    let sub;\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({\n          subId\n        });\n        break;\n      case 'logs':\n        const filterParams = req.params[1];\n        const filter = await filterManager.newLogFilter(filterParams);\n        sub = createSubFromFilter({\n          subId,\n          filter\n        });\n        break;\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`);\n    }\n    subscriptions[subId] = sub;\n    res.result = subId;\n    return;\n    function createSubNewHeads(_ref2) {\n      let {\n        subId\n      } = _ref2;\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update);\n        },\n        update: async _ref3 => {\n          let {\n            oldBlock,\n            newBlock\n          } = _ref3;\n          // for newHeads\n          const toBlock = newBlock;\n          const fromBlock = incrementHexInt(oldBlock);\n          const rawBlocks = await getBlocksForRange({\n            provider,\n            fromBlock,\n            toBlock\n          });\n          const results = rawBlocks.map(normalizeBlock);\n          results.forEach(value => {\n            _emitSubscriptionResult(subId, value);\n          });\n        }\n      };\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update);\n      return sub;\n    }\n    function createSubFromFilter(_ref4) {\n      let {\n        subId,\n        filter\n      } = _ref4;\n      filter.on('update', result => _emitSubscriptionResult(subId, result));\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex);\n        }\n      };\n      return sub;\n    }\n  }\n  async function unsubscribe(req, res) {\n    if (isDestroyed) throw new Error('SubscriptionManager - attempting to use after destroying');\n    const id = req.params[0];\n    const subscription = subscriptions[id];\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false;\n      return;\n    }\n    // cleanup subscription\n    delete subscriptions[id];\n    await subscription.destroy();\n    res.result = true;\n  }\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value\n      }\n    });\n  }\n  function destroy() {\n    events.removeAllListeners();\n    for (const id in subscriptions) {\n      subscriptions[id].destroy();\n      delete subscriptions[id];\n    }\n    isDestroyed = true;\n  }\n}\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData\n  };\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}