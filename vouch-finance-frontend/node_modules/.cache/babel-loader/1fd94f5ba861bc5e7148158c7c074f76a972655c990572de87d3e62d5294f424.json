{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletSDK = void 0;\nconst wallet_logo_1 = require(\"./assets/wallet-logo\");\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\nconst CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\nconst WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\nconst WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\nconst WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\nconst util_1 = require(\"./util\");\nconst LINK_API_URL = process.env.LINK_API_URL || \"https://www.walletlink.org\";\nconst SDK_VERSION = process.env.SDK_VERSION || require(\"../package.json\").version || \"unknown\";\nclass CoinbaseWalletSDK {\n  /**\n   * Constructor\n   * @param options Coinbase Wallet SDK constructor options\n   */\n  constructor(options) {\n    var _a, _b, _c;\n    this._appName = \"\";\n    this._appLogoUrl = null;\n    this._relay = null;\n    this._relayEventManager = null;\n    const linkAPIUrl = options.linkAPIUrl || LINK_API_URL;\n    let uiConstructor;\n    if (!options.uiConstructor) {\n      uiConstructor = opts => new WalletSDKUI_1.WalletSDKUI(opts);\n    } else {\n      uiConstructor = options.uiConstructor;\n    }\n    if (typeof options.overrideIsMetaMask === \"undefined\") {\n      this._overrideIsMetaMask = false;\n    } else {\n      this._overrideIsMetaMask = options.overrideIsMetaMask;\n    }\n    this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this._overrideIsCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n    if (options.diagnosticLogger && options.eventListener) {\n      throw new Error(\"Can't have both eventListener and diagnosticLogger options, use only diagnosticLogger\");\n    }\n    if (options.eventListener) {\n      this._diagnosticLogger = {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        log: options.eventListener.onEvent\n      };\n    } else {\n      this._diagnosticLogger = options.diagnosticLogger;\n    }\n    this._reloadOnDisconnect = (_c = options.reloadOnDisconnect) !== null && _c !== void 0 ? _c : true;\n    const url = new URL(linkAPIUrl);\n    const origin = `${url.protocol}//${url.host}`;\n    this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${origin}`); // needs migration to preserve local states\n    this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n    if (this.walletExtension || this.coinbaseBrowser) {\n      return;\n    }\n    this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n    this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n      linkAPIUrl,\n      version: SDK_VERSION,\n      darkMode: !!options.darkMode,\n      uiConstructor,\n      storage: this._storage,\n      relayEventManager: this._relayEventManager,\n      diagnosticLogger: this._diagnosticLogger\n    });\n    this.setAppInfo(options.appName, options.appLogoUrl);\n    if (!!options.headlessMode) return;\n    this._relay.attachUI();\n  }\n  /**\n   * Create a Web3 Provider object\n   * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n   * @param chainId Ethereum Chain ID (Default: 1)\n   * @returns A Web3 Provider\n   */\n  makeWeb3Provider() {\n    let jsonRpcUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const extension = this.walletExtension;\n    if (extension) {\n      if (!this.isCipherProvider(extension)) {\n        extension.setProviderInfo(jsonRpcUrl, chainId);\n      }\n      if (this._reloadOnDisconnect === false && typeof extension.disableReloadOnDisconnect === \"function\") extension.disableReloadOnDisconnect();\n      return extension;\n    }\n    const dappBrowser = this.coinbaseBrowser;\n    if (dappBrowser) {\n      return dappBrowser;\n    }\n    const relay = this._relay;\n    if (!relay || !this._relayEventManager || !this._storage) {\n      throw new Error(\"Relay not initialized, should never happen\");\n    }\n    if (!jsonRpcUrl) relay.setConnectDisabled(true);\n    return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n      relayProvider: () => Promise.resolve(relay),\n      relayEventManager: this._relayEventManager,\n      storage: this._storage,\n      jsonRpcUrl,\n      chainId,\n      qrUrl: this.getQrUrl(),\n      diagnosticLogger: this._diagnosticLogger,\n      overrideIsMetaMask: this._overrideIsMetaMask,\n      overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n      overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser\n    });\n  }\n  /**\n   * Set application information\n   * @param appName Application name\n   * @param appLogoUrl Application logo image URL\n   */\n  setAppInfo(appName, appLogoUrl) {\n    var _a;\n    this._appName = appName || \"DApp\";\n    this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n    const extension = this.walletExtension;\n    if (extension) {\n      if (!this.isCipherProvider(extension)) {\n        extension.setAppInfo(this._appName, this._appLogoUrl);\n      }\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n    }\n  }\n  /**\n   * Disconnect. After disconnecting, this will reload the web page to ensure\n   * all potential stale state is cleared.\n   */\n  disconnect() {\n    var _a;\n    const extension = this.walletExtension;\n    if (extension) {\n      void extension.close();\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n    }\n  }\n  /**\n   * Return QR URL for mobile wallet connection, will return null if extension is installed\n   */\n  getQrUrl() {\n    var _a, _b;\n    return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n  }\n  /**\n   * Official Coinbase Wallet logo for developers to use on their frontend\n   * @param type Type of wallet logo: \"standard\" | \"circle\" | \"text\" | \"textWithLogo\" | \"textLight\" | \"textWithLogoLight\"\n   * @param width Width of the logo (Optional)\n   * @returns SVG Data URI\n   */\n  getCoinbaseWalletLogo(type) {\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 240;\n    return (0, wallet_logo_1.walletLogo)(type, width);\n  }\n  get walletExtension() {\n    var _a;\n    return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n  }\n  get coinbaseBrowser() {\n    var _a, _b;\n    try {\n      // Coinbase DApp browser does not inject into iframes so grab provider from top frame if it exists\n      const ethereum = (_a = window.ethereum) !== null && _a !== void 0 ? _a : (_b = window.top) === null || _b === void 0 ? void 0 : _b.ethereum;\n      if (!ethereum) {\n        return undefined;\n      }\n      if (\"isCoinbaseBrowser\" in ethereum && ethereum.isCoinbaseBrowser) {\n        return ethereum;\n      } else {\n        return undefined;\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n  isCipherProvider(provider) {\n    // @ts-expect-error isCipher walletlink property\n    return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n  }\n}\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = SDK_VERSION;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}