{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { useState, useEffect, useCallback } from \"react\";\nconst error = message => {\n  throw new Error(\"[Leaderboard error] \" + message);\n};\nexport const useLeaderboard = api => {\n  const [length, setLength] = useState();\n  const [updatedCount, setUpdatedCount] = useState(0);\n  const [updateStopped, setUpdateStopped] = useState(false);\n  const middleware = useCallback(response => {\n    setLength(response.totalEntries);\n    setUpdatedCount(updatedCount + 1);\n    return response;\n  }, [setLength, updatedCount]);\n  const getLeaderboard = useCallback(function () {\n    return api.getLeaderboard(...arguments).then(middleware);\n  }, []);\n  useEffect(() => {\n    if (!updatedCount) return;\n    setUpdateStopped(true);\n    const timeout = setTimeout(() => setUpdateStopped(false), 60 * 1000);\n    return () => clearTimeout(timeout);\n  }, [updatedCount]);\n  const update = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (updateStopped) return;\n    yield api.getLeaderboard(undefined, undefined, 100).then(middleware);\n  }), [updateStopped]);\n  return {\n    loaded: length !== undefined,\n    length,\n    update,\n    getLeaderboard\n  };\n};\n//# sourceMappingURL=leaderboard.hook.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}