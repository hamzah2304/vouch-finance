{"ast":null,"code":"const {\n  Transform\n} = require('readable-stream');\nmodule.exports = KeccakState => class Keccak extends Transform {\n  constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {\n    super(options);\n    this._rate = rate;\n    this._capacity = capacity;\n    this._delimitedSuffix = delimitedSuffix;\n    this._hashBitLength = hashBitLength;\n    this._options = options;\n    this._state = new KeccakState();\n    this._state.initialize(rate, capacity);\n    this._finalized = false;\n  }\n  _transform(chunk, encoding, callback) {\n    let error = null;\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  }\n  _flush(callback) {\n    let error = null;\n    try {\n      this.push(this.digest());\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  }\n  update(data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n    this._state.absorb(data);\n    return this;\n  }\n  digest(encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);\n    let digest = this._state.squeeze(this._hashBitLength / 8);\n    if (encoding !== undefined) digest = digest.toString(encoding);\n    this._resetState();\n    return digest;\n  }\n\n  // remove result from memory\n  _resetState() {\n    this._state.initialize(this._rate, this._capacity);\n    return this;\n  }\n\n  // because sometimes we need hash right now and little later\n  _clone() {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);\n    this._state.copy(clone._state);\n    clone._finalized = this._finalized;\n    return clone;\n  }\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}