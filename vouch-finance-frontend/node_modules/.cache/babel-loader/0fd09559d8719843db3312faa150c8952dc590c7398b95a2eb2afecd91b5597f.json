{"ast":null,"code":"const EthQuery = require('eth-query');\nconst pify = require('pify');\nconst SafeEventEmitter = require('safe-event-emitter');\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\nconst blockTrackerEvents = ['sync', 'latest'];\nclass BaseBlockTracker extends SafeEventEmitter {\n  //\n  // public\n  //\n\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n    // state\n    this._blockResetTimeout;\n    this._currentBlock = null;\n    this._isRunning = false;\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n    // listen for handler changes\n    this._setupInternalEvents();\n  }\n  isRunning() {\n    return this._isRunning;\n  }\n  getCurrentBlock() {\n    return this._currentBlock;\n  }\n  async getLatestBlock() {\n    // return if available\n    if (this._currentBlock) return this._currentBlock;\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => this.once('latest', resolve));\n    // return newly set current block\n    return latestBlock;\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners(eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    }\n    // re-add internal events\n    this._setupInternalEvents();\n    // trigger stop check just in case\n    this._onRemoveListener();\n  }\n\n  //\n  // to be implemented in subclass\n  //\n\n  _start() {\n    // default behavior is noop\n  }\n  _end() {\n    // default behavior is noop\n  }\n\n  //\n  // private\n  //\n\n  _setupInternalEvents() {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener);\n    this.removeListener('removeListener', this._onRemoveListener);\n    // then add them\n    this.on('newListener', this._onNewListener);\n    this.on('removeListener', this._onRemoveListener);\n  }\n  _onNewListener(eventName, handler) {\n    // `newListener` is called *before* the listener is added\n    if (!blockTrackerEvents.includes(eventName)) return;\n    this._maybeStart();\n  }\n  _onRemoveListener(eventName, handler) {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) return;\n    this._maybeEnd();\n  }\n  _maybeStart() {\n    if (this._isRunning) return;\n    this._isRunning = true;\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout();\n    this._start();\n  }\n  _maybeEnd() {\n    if (!this._isRunning) return;\n    this._isRunning = false;\n    this._setupBlockResetTimeout();\n    this._end();\n  }\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this._currentBlock;\n    // only update if blok number is higher\n    if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) return;\n    this._setCurrentBlock(newBlock);\n  }\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', {\n      oldBlock,\n      newBlock\n    });\n  }\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout();\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n  _cancelBlockResetTimeout() {\n    clearTimeout(this._blockResetTimeout);\n  }\n  _resetCurrentBlock() {\n    this._currentBlock = null;\n  }\n}\nmodule.exports = BaseBlockTracker;\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}