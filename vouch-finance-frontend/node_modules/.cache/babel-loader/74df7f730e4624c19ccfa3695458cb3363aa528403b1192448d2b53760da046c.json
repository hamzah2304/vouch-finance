{"ast":null,"code":"import uniqBy from 'lodash.uniqby';\nimport { ProviderLabel } from './types.js';\nimport standardWallets from './wallets.js';\nimport { validateWalletOptions } from './validation.js';\nimport { defaultWalletUnavailableMsg, isWalletAvailable } from './helpers.js';\nexport { ProviderIdentityFlag, ProviderLabel } from './types.js';\nfunction injected(options) {\n  if (typeof window === 'undefined') return () => null;\n  if (options) {\n    const result = validateWalletOptions(options);\n    if (result && result.error) throw result.error;\n  }\n  return helpers => {\n    const {\n      device\n    } = helpers;\n    const {\n      custom = [],\n      filter = {},\n      displayUnavailable,\n      sort,\n      walletUnavailableMessage\n    } = options || {};\n    // combine custom with standard wallets and dedupe\n    const allWallets = uniqBy([...custom, ...standardWallets], _ref => {\n      let {\n        label\n      } = _ref;\n      return label;\n    });\n    const wallets = allWallets.reduce((acc, wallet) => {\n      const {\n        label,\n        platforms,\n        injectedNamespace,\n        checkProviderIdentity\n      } = wallet;\n      const walletFilters = filter[label];\n      const filteredWallet = walletFilters === false;\n      const provider = window[injectedNamespace];\n      const walletAvailable = isWalletAvailable(provider, checkProviderIdentity, device);\n      let excludedDevice = false;\n      // dev specified platform filters\n      if (Array.isArray(walletFilters) && (walletFilters.includes(device.type) || walletFilters.includes(device.os.name))) {\n        excludedDevice = true;\n      }\n      // unavailable filter\n      if (walletFilters === 'unavailable' && !walletAvailable) {\n        excludedDevice = true;\n      }\n      // wallet specified platform filters\n      const invalidPlatform = !platforms.includes('all') && !platforms.includes(device.type) && !platforms.includes(device.os.name);\n      const supportedWallet = !filteredWallet && !excludedDevice && !invalidPlatform && (walletAvailable || displayUnavailable);\n      if (supportedWallet) {\n        acc.push(\n        // modify wallet to display error if unavailable but displayUnavailable is set\n        displayUnavailable && !walletAvailable ? {\n          ...wallet,\n          getInterface: async () => {\n            throw new Error(walletUnavailableMessage ? walletUnavailableMessage(wallet) : defaultWalletUnavailableMsg(wallet));\n          }\n        } :\n        // otherwise add wallet to list as is\n        wallet);\n      }\n      return acc;\n    }, []);\n    if (wallets.length) {\n      const moreThanOneWallet = wallets.length > 1;\n      // if more than one wallet, then remove detected wallet\n      const formattedWallets = wallets.filter(wallet => {\n        const {\n          label\n        } = wallet;\n        return !(label === ProviderLabel.Detected && moreThanOneWallet);\n      })\n      // then map to the WalletModule interface\n      .map(_ref2 => {\n        let {\n          label,\n          getIcon,\n          getInterface\n        } = _ref2;\n        return {\n          label,\n          getIcon,\n          getInterface\n        };\n      })\n      // default sort by alphabetical\n      .sort((a, b) => a.label < b.label ? -1 : a.label > b.label ? 1 : 0);\n      return sort ? sort(formattedWallets) : formattedWallets;\n    }\n    return [];\n  };\n}\nexport default injected;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}