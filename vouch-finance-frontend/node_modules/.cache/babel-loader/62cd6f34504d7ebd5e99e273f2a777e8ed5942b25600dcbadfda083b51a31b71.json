{"ast":null,"code":"import { BigNumber, ethers } from 'ethers';\nimport { isEmpty } from './common';\nconst formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\nexport const formatMoney = num => {\n  if (isEmpty(num) || Number.isNaN(num)) {\n    return num;\n  }\n  return formatter.format(Number(num));\n};\nexport const downScale = (num, decimals) => {\n  if (isEmpty(num) || isEmpty(decimals)) {\n    return num;\n  }\n  const result = ethers.utils.formatUnits(num, decimals);\n  if (typeof num === 'number') {\n    return Number(result);\n  }\n  return result;\n};\nexport const upScale = (num, decimals) => {\n  if (isEmpty(num) || isEmpty(decimals)) {\n    return num;\n  }\n  const result = Number(num) * 10 ** decimals;\n  if (typeof num === 'string') {\n    return String(result);\n  }\n  return result;\n};\n\n// BigNumber.from needs the parameter to be integer otherwise it will throw error\n// Create this help function to make sure passing integer to BigNumber.from\nexport const toBigNumber = num => {\n  try {\n    return BigNumber.from(num);\n  } catch (e) {\n    return BigNumber.from(Number(num).toFixed(0));\n  }\n};","map":{"version":3,"names":["BigNumber","ethers","isEmpty","formatter","Intl","NumberFormat","style","currency","formatMoney","num","Number","isNaN","format","downScale","decimals","result","utils","formatUnits","upScale","String","toBigNumber","from","e","toFixed"],"sources":["/Users/hamzahmahmood/Downloads/ETHDenver/huma-workshop/huma-demo-dapp/src/utils/number.ts"],"sourcesContent":["import { BigNumber, ethers } from 'ethers'\nimport { isEmpty } from './common'\n\nconst formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n})\n\nexport const formatMoney = (num: number | string | undefined) => {\n  if (isEmpty(num) || Number.isNaN(num)) {\n    return num\n  }\n  return formatter.format(Number(num))\n}\n\nexport const downScale = <T = string>(\n  num: string | number | BigNumber,\n  decimals?: number,\n): T => {\n  if (isEmpty(num) || isEmpty(decimals)) {\n    return num as T\n  }\n  const result = ethers.utils.formatUnits(num, decimals)\n  if (typeof num === 'number') {\n    return Number(result) as T\n  }\n  return result as T\n}\n\nexport const upScale = <T = string>(\n  num: string | number,\n  decimals?: number,\n): T => {\n  if (isEmpty(num) || isEmpty(decimals)) {\n    return num as T\n  }\n  const result = Number(num) * 10 ** decimals!\n  if (typeof num === 'string') {\n    return String(result) as T\n  }\n  return result as T\n}\n\n// BigNumber.from needs the parameter to be integer otherwise it will throw error\n// Create this help function to make sure passing integer to BigNumber.from\nexport const toBigNumber = (num: string | number) => {\n  try {\n    return BigNumber.from(num)\n  } catch (e) {\n    return BigNumber.from(Number(num).toFixed(0))\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,QAAQ;AAC1C,SAASC,OAAO,QAAQ,UAAU;AAElC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EAC/CC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAIC,GAAgC,IAAK;EAC/D,IAAIP,OAAO,CAACO,GAAG,CAAC,IAAIC,MAAM,CAACC,KAAK,CAACF,GAAG,CAAC,EAAE;IACrC,OAAOA,GAAG;EACZ;EACA,OAAON,SAAS,CAACS,MAAM,CAACF,MAAM,CAACD,GAAG,CAAC,CAAC;AACtC,CAAC;AAED,OAAO,MAAMI,SAAS,GAAG,CACvBJ,GAAgC,EAChCK,QAAiB,KACX;EACN,IAAIZ,OAAO,CAACO,GAAG,CAAC,IAAIP,OAAO,CAACY,QAAQ,CAAC,EAAE;IACrC,OAAOL,GAAG;EACZ;EACA,MAAMM,MAAM,GAAGd,MAAM,CAACe,KAAK,CAACC,WAAW,CAACR,GAAG,EAAEK,QAAQ,CAAC;EACtD,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOC,MAAM,CAACK,MAAM,CAAC;EACvB;EACA,OAAOA,MAAM;AACf,CAAC;AAED,OAAO,MAAMG,OAAO,GAAG,CACrBT,GAAoB,EACpBK,QAAiB,KACX;EACN,IAAIZ,OAAO,CAACO,GAAG,CAAC,IAAIP,OAAO,CAACY,QAAQ,CAAC,EAAE;IACrC,OAAOL,GAAG;EACZ;EACA,MAAMM,MAAM,GAAGL,MAAM,CAACD,GAAG,CAAC,GAAG,EAAE,IAAIK,QAAS;EAC5C,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOU,MAAM,CAACJ,MAAM,CAAC;EACvB;EACA,OAAOA,MAAM;AACf,CAAC;;AAED;AACA;AACA,OAAO,MAAMK,WAAW,GAAIX,GAAoB,IAAK;EACnD,IAAI;IACF,OAAOT,SAAS,CAACqB,IAAI,CAACZ,GAAG,CAAC;EAC5B,CAAC,CAAC,OAAOa,CAAC,EAAE;IACV,OAAOtB,SAAS,CAACqB,IAAI,CAACX,MAAM,CAACD,GAAG,CAAC,CAACc,OAAO,CAAC,CAAC,CAAC,CAAC;EAC/C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}