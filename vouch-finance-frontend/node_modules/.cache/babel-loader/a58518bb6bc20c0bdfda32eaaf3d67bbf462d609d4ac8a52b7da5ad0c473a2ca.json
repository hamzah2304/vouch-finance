{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWeb3ReactStoreAndActions = exports.MAX_SAFE_CHAIN_ID = void 0;\nconst address_1 = require(\"@ethersproject/address\");\nconst zustand_1 = require(\"zustand\");\n/**\n * MAX_SAFE_CHAIN_ID is the upper bound limit on what will be accepted for `chainId`\n * `MAX_SAFE_CHAIN_ID = floor( ( 2**53 - 39 ) / 2 ) = 4503599627370476`\n *\n * @see {@link https://github.com/MetaMask/metamask-extension/blob/b6673731e2367e119a5fee9a454dd40bd4968948/shared/constants/network.js#L31}\n */\nexports.MAX_SAFE_CHAIN_ID = 4503599627370476;\nfunction validateChainId(chainId) {\n  if (!Number.isInteger(chainId) || chainId <= 0 || chainId > exports.MAX_SAFE_CHAIN_ID) {\n    throw new Error(`Invalid chainId ${chainId}`);\n  }\n}\nfunction validateAccount(account) {\n  return (0, address_1.getAddress)(account);\n}\nconst DEFAULT_STATE = {\n  chainId: undefined,\n  accounts: undefined,\n  activating: false\n};\nfunction createWeb3ReactStoreAndActions() {\n  const store = (0, zustand_1.createStore)()(() => DEFAULT_STATE);\n  // flag for tracking updates so we don't clobber data when cancelling activation\n  let nullifier = 0;\n  /**\n   * Sets activating to true, indicating that an update is in progress.\n   *\n   * @returns cancelActivation - A function that cancels the activation by setting activating to false,\n   * as long as there haven't been any intervening updates.\n   */\n  function startActivation() {\n    const nullifierCached = ++nullifier;\n    store.setState(Object.assign(Object.assign({}, DEFAULT_STATE), {\n      activating: true\n    }));\n    // return a function that cancels the activation iff nothing else has happened\n    return () => {\n      if (nullifier === nullifierCached) store.setState({\n        activating: false\n      });\n    };\n  }\n  /**\n   * Used to report a `stateUpdate` which is merged with existing state. The first `stateUpdate` that results in chainId\n   * and accounts being set will also set activating to false, indicating a successful connection.\n   *\n   * @param stateUpdate - The state update to report.\n   */\n  function update(stateUpdate) {\n    // validate chainId statically, independent of existing state\n    if (stateUpdate.chainId !== undefined) {\n      validateChainId(stateUpdate.chainId);\n    }\n    // validate accounts statically, independent of existing state\n    if (stateUpdate.accounts !== undefined) {\n      for (let i = 0; i < stateUpdate.accounts.length; i++) {\n        stateUpdate.accounts[i] = validateAccount(stateUpdate.accounts[i]);\n      }\n    }\n    nullifier++;\n    store.setState(existingState => {\n      var _a, _b;\n      // determine the next chainId and accounts\n      const chainId = (_a = stateUpdate.chainId) !== null && _a !== void 0 ? _a : existingState.chainId;\n      const accounts = (_b = stateUpdate.accounts) !== null && _b !== void 0 ? _b : existingState.accounts;\n      // ensure that the activating flag is cleared when appropriate\n      let activating = existingState.activating;\n      if (activating && chainId && accounts) {\n        activating = false;\n      }\n      return {\n        chainId,\n        accounts,\n        activating\n      };\n    });\n  }\n  /**\n   * Resets connector state back to the default state.\n   */\n  function resetState() {\n    nullifier++;\n    store.setState(DEFAULT_STATE);\n  }\n  return [store, {\n    startActivation,\n    update,\n    resetState\n  }];\n}\nexports.createWeb3ReactStoreAndActions = createWeb3ReactStoreAndActions;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}