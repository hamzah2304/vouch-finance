{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\nvar BufferWhenOperator = /*@__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n  BufferWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  };\n  return BufferWhenOperator;\n}();\nvar BufferWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferWhenSubscriber, _super);\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n    _this.openBuffer();\n    return _this;\n  }\n  BufferWhenSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n  BufferWhenSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    _super.prototype._complete.call(this);\n  };\n  BufferWhenSubscriber.prototype._unsubscribe = function () {\n    this.buffer = undefined;\n    this.subscribing = false;\n  };\n  BufferWhenSubscriber.prototype.notifyNext = function () {\n    this.openBuffer();\n  };\n  BufferWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  };\n  BufferWhenSubscriber.prototype.openBuffer = function () {\n    var closingSubscription = this.closingSubscription;\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n    var buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n    this.buffer = [];\n    var closingNotifier;\n    try {\n      var closingSelector = this.closingSelector;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    this.subscribing = false;\n  };\n  return BufferWhenSubscriber;\n}(SimpleOuterSubscriber);\n//# sourceMappingURL=bufferWhen.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}