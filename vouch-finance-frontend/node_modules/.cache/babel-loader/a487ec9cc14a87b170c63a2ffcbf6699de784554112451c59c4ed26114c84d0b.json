{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResolutionError = exports.ResolutionErrorCode = void 0;\nvar ResolutionErrorCode;\n(function (ResolutionErrorCode) {\n  ResolutionErrorCode[\"UnregisteredDomain\"] = \"UnregisteredDomain\";\n  ResolutionErrorCode[\"UnspecifiedResolver\"] = \"UnspecifiedResolver\";\n  ResolutionErrorCode[\"UnsupportedDomain\"] = \"UnsupportedDomain\";\n  ResolutionErrorCode[\"UnsupportedService\"] = \"UnsupportedService\";\n  ResolutionErrorCode[\"UnsupportedMethod\"] = \"UnsupportedMethod\";\n  ResolutionErrorCode[\"UnspecifiedCurrency\"] = \"UnspecifiedCurrency\";\n  ResolutionErrorCode[\"UnsupportedCurrency\"] = \"UnsupportedCurrency\";\n  ResolutionErrorCode[\"IncorrectResolverInterface\"] = \"IncorrectResolverInterface\";\n  ResolutionErrorCode[\"RecordNotFound\"] = \"RecordNotFound\";\n  ResolutionErrorCode[\"MetadataEndpointError\"] = \"MetadataEndpointError\";\n  ResolutionErrorCode[\"ServiceProviderError\"] = \"ServiceProviderError\";\n  ResolutionErrorCode[\"InvalidTwitterVerification\"] = \"InvalidTwitterVerification\";\n  ResolutionErrorCode[\"InconsistentDomainArray\"] = \"InconsistentDomainArray\";\n  ResolutionErrorCode[\"InvalidDomainAddress\"] = \"InvalidDomainAddress\";\n})(ResolutionErrorCode = exports.ResolutionErrorCode || (exports.ResolutionErrorCode = {}));\n/**\n * @internal\n * Internal Mapping object from ResolutionErrorCode to a ResolutionErrorHandler\n */\nvar HandlersByCode = (_a = {}, _a[ResolutionErrorCode.UnregisteredDomain] = function (params) {\n  return \"Domain \".concat(params.domain, \" is not registered\");\n}, _a[ResolutionErrorCode.UnspecifiedResolver] = function (params) {\n  return \"\".concat(params.location ? \"\".concat(params.location, \": \") : '', \"Domain \").concat(params.domain, \" is not configured\");\n}, _a[ResolutionErrorCode.UnsupportedDomain] = function (params) {\n  return \"Domain \".concat(params.domain, \" is not supported\");\n}, _a[ResolutionErrorCode.UnsupportedMethod] = function (params) {\n  var _a;\n  // We normally expect a domain name, but in can be absent in the tests.\n  var zilHelp = ((_a = params.domain) === null || _a === void 0 ? void 0 : _a.endsWith('.zil')) ? \" (if this method was called via the Resolution class with both UNS and ZNS providers configured not in the API mode, this error also means that the domain doesn't exist in UNS)\" : '';\n  return \"Method \".concat(params.methodName, \" is not supported for \").concat(params.domain).concat(zilHelp);\n}, _a[ResolutionErrorCode.InvalidTwitterVerification] = function (params) {\n  return \"\".concat(params.location ? \"\".concat(params.location, \": \") : '', \"Domain \").concat(params.domain, \" has invalid Twitter signature verification\");\n}, _a[ResolutionErrorCode.UnsupportedCurrency] = function (params) {\n  return \"\".concat(params.currencyTicker, \" is not supported\");\n}, _a[ResolutionErrorCode.IncorrectResolverInterface] = function (params) {\n  return \"Domain resolver is configured incorrectly for \".concat(params.method);\n}, _a[ResolutionErrorCode.RecordNotFound] = function (params) {\n  return \"\".concat(params.location ? \"\".concat(params.location, \": \") : '', \"No \").concat(params.recordName, \" record found for \").concat(params.domain);\n}, _a[ResolutionErrorCode.ServiceProviderError] = function (params) {\n  return \"< \".concat(params.providerMessage, \" >\");\n}, _a[ResolutionErrorCode.MetadataEndpointError] = function (params) {\n  return \"Failed to query tokenUri \".concat(params.tokenUri, \". Error: \").concat(params.errorMessage);\n}, _a[ResolutionErrorCode.UnsupportedService] = function (params) {\n  return \"Naming service \".concat(params.namingService, \" is not supported\");\n}, _a[ResolutionErrorCode.InvalidDomainAddress] = function (params) {\n  return \"Domain address \".concat(params.domain, \" is invalid\");\n}, _a);\n/**\n * Resolution Error class is designed to control every error being thrown by Resolution\n * @param code - Error Code\n * - UnsupportedDomain - domain is not supported by current Resolution instance\n * - UnregisteredDomain - domain is not owned by any address\n * - UnspecifiedResolver - domain has no resolver specified\n * - UnspecifiedCurrency - domain resolver doesn't have any address of specified currency\n * - UnsupportedCurrency - currency is not supported\n * - IncorrectResolverInterface - ResolverInterface is incorrected\n * - RecordNotFound - No record was found\n * @param domain - Domain name that was being used\n * @param method\n */\nvar ResolutionError = /** @class */function (_super) {\n  __extends(ResolutionError, _super);\n  function ResolutionError(code, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = this;\n    var resolutionErrorHandler = HandlersByCode[code];\n    var domain = options.domain,\n      method = options.method,\n      currencyTicker = options.currencyTicker;\n    var message = resolutionErrorHandler(options);\n    _this = _super.call(this, message) || this;\n    _this.code = code;\n    _this.domain = domain;\n    _this.method = method;\n    _this.currencyTicker = currencyTicker;\n    _this.name = 'ResolutionError';\n    Object.setPrototypeOf(_this, ResolutionError.prototype);\n    return _this;\n  }\n  return ResolutionError;\n}(Error);\nexports.ResolutionError = ResolutionError;\nexports.default = ResolutionError;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}