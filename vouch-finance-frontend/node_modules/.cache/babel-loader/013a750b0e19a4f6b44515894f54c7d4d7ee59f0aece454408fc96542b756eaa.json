{"ast":null,"code":"import { BlockCipherMode } from './cipher-core.js';\nconst incWord = word => {\n  let _word = word;\n  if ((word >> 24 & 0xff) === 0xff) {\n    // overflow\n    let b1 = word >> 16 & 0xff;\n    let b2 = word >> 8 & 0xff;\n    let b3 = word & 0xff;\n    if (b1 === 0xff) {\n      // overflow b1\n      b1 = 0;\n      if (b2 === 0xff) {\n        b2 = 0;\n        if (b3 === 0xff) {\n          b3 = 0;\n        } else {\n          b3 += 1;\n        }\n      } else {\n        b2 += 1;\n      }\n    } else {\n      b1 += 1;\n    }\n    _word = 0;\n    _word += b1 << 16;\n    _word += b2 << 8;\n    _word += b3;\n  } else {\n    _word += 0x01 << 24;\n  }\n  return _word;\n};\nconst incCounter = counter => {\n  const _counter = counter;\n  _counter[0] = incWord(_counter[0]);\n  if (_counter[0] === 0) {\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n    _counter[1] = incWord(_counter[1]);\n  }\n  return _counter;\n};\n\n/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\nexport class CTRGladman extends BlockCipherMode {}\nCTRGladman.Encryptor = class extends CTRGladman {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n    incCounter(counter);\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTRGladman.Decryptor = CTRGladman.Encryptor;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}