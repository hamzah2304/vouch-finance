{"ast":null,"code":"import { ethers } from 'ethers';\nimport TxErrors from './contractError.json';\nimport { capitalizeFirstLetter } from './string';\nexport let TxStateType;\n(function (TxStateType) {\n  TxStateType[\"Success\"] = \"Success\";\n  TxStateType[\"Denied\"] = \"Denied\";\n  TxStateType[\"Invalid\"] = \"Invalid\";\n  TxStateType[\"Failed\"] = \"Failed\";\n  TxStateType[\"New\"] = \"New\";\n  TxStateType[\"GasEstimating\"] = \"GasEstimating\";\n  TxStateType[\"Signing\"] = \"Signing\";\n  TxStateType[\"Confirming\"] = \"Confirming\";\n})(TxStateType || (TxStateType = {}));\nexport const isTxFailed = txState => [TxStateType.Denied, TxStateType.Invalid, TxStateType.Failed].includes(txState);\nexport const increaseGasLimit = estimatedGasLimit => {\n  if (!estimatedGasLimit || Number.isNaN(estimatedGasLimit.toNumber())) {\n    console.log('estimatedGasLimit', estimatedGasLimit);\n    throw new Error('Estimated gas limited error.');\n  }\n  return estimatedGasLimit.mul(150).div(100);\n};\nconst parseErrorMessageToUserFriendlyMessage = message => capitalizeFirstLetter(message.replace('()', '').split(/(?=[A-Z])/).join(' ').toLowerCase());\nconst findContractErrorMessage = code => {\n  let reason = null;\n  Object.keys(TxErrors).forEach(key => {\n    // @ts-ignore\n    if (code.toLowerCase() === TxErrors[key].toLowerCase()) {\n      reason = parseErrorMessageToUserFriendlyMessage(key);\n    }\n  });\n  return reason;\n};\nexport const getTransactionErrorFromHash = async (provider, txHash) => {\n  const commonErrorMessage = 'Send transaction failed';\n  try {\n    const originTx = await provider.getTransaction(txHash);\n    const {\n      from,\n      to,\n      data,\n      gasLimit,\n      blockNumber\n    } = originTx;\n    // Only provide necessary params to get the tx return which can avoid unexpected error\n    const tx = {\n      from,\n      to,\n      data,\n      gasLimit\n    };\n    const code = await provider.call(tx, blockNumber);\n    const reason = findContractErrorMessage(code);\n    return reason !== null && reason !== void 0 ? reason : commonErrorMessage;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error) {\n    if (!error.data) {\n      console.error(error);\n      return commonErrorMessage;\n    }\n    const code = error.data.replace('Reverted ', '');\n    const reason = ethers.utils.toUtf8String(`0x${code.substr(138)}`);\n    console.error(error);\n    return reason;\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getTransactionErrorFromError = e => {\n  var _e$error, _e$error$data, _e$error$data$origina;\n  const errorCode = (_e$error = e.error) === null || _e$error === void 0 ? void 0 : (_e$error$data = _e$error.data) === null || _e$error$data === void 0 ? void 0 : (_e$error$data$origina = _e$error$data.originalError) === null || _e$error$data$origina === void 0 ? void 0 : _e$error$data$origina.data;\n  if (errorCode) {\n    const contractErrorMessage = findContractErrorMessage(errorCode);\n    if (contractErrorMessage) {\n      return contractErrorMessage;\n    }\n  }\n  return null;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const decodeLogs = (txlogs, abi) => {\n  const result = [];\n  const iface = new ethers.utils.Interface(abi);\n  // eslint-disable-next-line no-restricted-syntax\n  for (const log of txlogs) {\n    try {\n      result.push(iface.parseLog(log));\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["ethers","TxErrors","capitalizeFirstLetter","TxStateType","isTxFailed","txState","Denied","Invalid","Failed","includes","increaseGasLimit","estimatedGasLimit","Number","isNaN","toNumber","console","log","Error","mul","div","parseErrorMessageToUserFriendlyMessage","message","replace","split","join","toLowerCase","findContractErrorMessage","code","reason","Object","keys","forEach","key","getTransactionErrorFromHash","provider","txHash","commonErrorMessage","originTx","getTransaction","from","to","data","gasLimit","blockNumber","tx","call","error","utils","toUtf8String","substr","getTransactionErrorFromError","e","errorCode","originalError","contractErrorMessage","decodeLogs","txlogs","abi","result","iface","Interface","push","parseLog"],"sources":["/Users/hamzahmahmood/Downloads/ETHDenver/vouch-finance/vouch-finance-frontend/src/utils/transaction.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { ContractReceipt } from '@ethersproject/contracts'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { ethers } from 'ethers'\nimport TxErrors from './contractError.json'\nimport { capitalizeFirstLetter } from './string'\n\nexport enum TxStateType {\n  Success = 'Success',\n  Denied = 'Denied',\n  Invalid = 'Invalid',\n  Failed = 'Failed',\n  New = 'New',\n  GasEstimating = 'GasEstimating',\n  Signing = 'Signing',\n  Confirming = 'Confirming',\n}\n\nexport interface TxResponse {\n  txReceipt: ContractReceipt\n}\n\nexport interface Event {\n  name: string\n  type: string\n  value: string\n}\n\nexport interface EventLog {\n  name: string\n  events: Event[]\n  address: string\n}\n\nexport const isTxFailed = (txState: TxStateType) =>\n  [TxStateType.Denied, TxStateType.Invalid, TxStateType.Failed].includes(\n    txState,\n  )\n\nexport const increaseGasLimit = (estimatedGasLimit: BigNumber) => {\n  if (!estimatedGasLimit || Number.isNaN(estimatedGasLimit.toNumber())) {\n    console.log('estimatedGasLimit', estimatedGasLimit)\n    throw new Error('Estimated gas limited error.')\n  }\n  return estimatedGasLimit.mul(150).div(100)\n}\n\nconst parseErrorMessageToUserFriendlyMessage = (message: string) =>\n  capitalizeFirstLetter(\n    message\n      .replace('()', '')\n      .split(/(?=[A-Z])/)\n      .join(' ')\n      .toLowerCase(),\n  )\n\nconst findContractErrorMessage = (code: string): string | null => {\n  let reason: string | null = null\n  Object.keys(TxErrors).forEach((key) => {\n    // @ts-ignore\n    if (code.toLowerCase() === TxErrors[key].toLowerCase()) {\n      reason = parseErrorMessageToUserFriendlyMessage(key)\n    }\n  })\n  return reason\n}\n\nexport const getTransactionErrorFromHash = async (\n  provider: Web3Provider,\n  txHash: string,\n): Promise<string> => {\n  const commonErrorMessage = 'Send transaction failed'\n  try {\n    const originTx = await provider.getTransaction(txHash)\n    const { from, to, data, gasLimit, blockNumber } = originTx\n    // Only provide necessary params to get the tx return which can avoid unexpected error\n    const tx = { from, to, data, gasLimit }\n    const code = await provider.call(tx, blockNumber)\n    const reason = findContractErrorMessage(code)\n    return reason ?? commonErrorMessage\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    if (!error.data) {\n      console.error(error)\n      return commonErrorMessage\n    }\n    const code = error.data.replace('Reverted ', '')\n    const reason = ethers.utils.toUtf8String(`0x${code.substr(138)}`)\n    console.error(error)\n    return reason\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getTransactionErrorFromError = (e: any) => {\n  const errorCode = e.error?.data?.originalError?.data\n  if (errorCode) {\n    const contractErrorMessage = findContractErrorMessage(errorCode)\n    if (contractErrorMessage) {\n      return contractErrorMessage\n    }\n  }\n  return null\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const decodeLogs = (txlogs: any[], abi: any) => {\n  const result: ethers.utils.LogDescription[] = []\n  const iface = new ethers.utils.Interface(abi)\n  // eslint-disable-next-line no-restricted-syntax\n  for (const log of txlogs) {\n    try {\n      result.push(iface.parseLog(log))\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      console.error(error)\n    }\n  }\n  return result\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}