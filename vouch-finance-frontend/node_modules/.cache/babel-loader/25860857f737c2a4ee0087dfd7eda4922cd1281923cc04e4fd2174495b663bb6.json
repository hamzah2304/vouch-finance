{"ast":null,"code":"import { useEffect, useCallback, useState, useMemo } from \"react\";\nimport { providers } from \"ethers\";\nimport Onboard from \"@web3-onboard/core\";\nimport injectedModule from \"@web3-onboard/injected-wallets\";\nimport { useLocalStorageSettings } from \"./hooks/useLocalStorageSettings\";\nimport { spectralLogo } from \"./assets/spectral.svg\";\nimport { onboardCss } from \"./web3Onboard/onboard-styles\";\n// Onboard config\nconst injected = injectedModule();\n// Onboard\nconst getOnboard = function (chainIdHex) {\n  let wallets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Onboard({\n    wallets: [injected, ...wallets],\n    chains: [\n    // {\n    //   id: '0x1',\n    //   token: 'ETH',\n    //   label: 'Ethereum Mainnet',\n    //   rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`\n    // },\n    {\n      id: chainIdHex,\n      token: \"ETH\",\n      label: \"Arbitrum Goerli Testnet\",\n      rpcUrl: `https://goerli-rollup.arbitrum.io/rpc`\n    }],\n    appMetadata: {\n      name: \"Spectral Finance\",\n      icon: spectralLogo,\n      logo: spectralLogo,\n      description: \"Spectral Finance\",\n      recommendedInjectedWallets: [{\n        name: \"Coinbase\",\n        url: \"https://wallet.coinbase.com/\"\n      }, {\n        name: \"MetaMask\",\n        url: \"https://metamask.io\"\n      }]\n    },\n    accountCenter: {\n      desktop: {\n        enabled: false\n      },\n      mobile: {\n        enabled: false\n      }\n    }\n  });\n};\n// END Onboard config\nexport function useWeb3OnboardHook(config) {\n  var _a, _b, _c, _d, _e, _f;\n  const chainIdHex = '0x' + Number(config.chainId).toString(16);\n  const onboard = useMemo(() => getOnboard(chainIdHex, config.supportedWallets), []);\n  const [loading, setLoading] = useState(false);\n  const [autoConnect, setAutoConnect] = useState(true);\n  const [wallets, setWallets] = useState();\n  const [previousConnected, setPreviousConnected] = useLocalStorageSettings(\"web3-previous-connected\");\n  const connect = useCallback(function () {\n    let skipAutoLogin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    setAutoConnect(false);\n    const settings = !skipAutoLogin && !!(previousConnected === null || previousConnected === void 0 ? void 0 : previousConnected[0]) && {\n      autoSelect: {\n        label: previousConnected[0],\n        disableModals: true\n      }\n    };\n    return onboard.connectWallet(settings || undefined).then(wallets => {\n      if (wallets === null || wallets === void 0 ? void 0 : wallets.length) {\n        setWallets(wallets);\n        // forceChain();\n      }\n\n      setLoading(false);\n      return true;\n    }).catch(e => {\n      console.warn(e);\n      return false;\n    });\n  }, [previousConnected]);\n  const disconnect = useCallback(() => {\n    setPreviousConnected();\n    setWallets(undefined);\n    onboard.state.get().wallets.forEach(_ref => {\n      let {\n        label\n      } = _ref;\n      return onboard.disconnectWallet({\n        label\n      });\n    });\n  }, [setPreviousConnected]);\n  const switchWallet = useCallback(() => {\n    const [primaryWallet] = onboard.state.get().wallets;\n    return connect(true).then(success => {\n      const wallets = onboard.state.get().wallets;\n      if (success && wallets.length > 1) {\n        onboard.disconnectWallet({\n          label: primaryWallet.label\n        });\n      }\n      return success;\n    });\n  }, [connect]);\n  const forceChain = useCallback(() => {\n    return onboard.setChain({\n      wallet: 'MetaMask',\n      chainId: chainIdHex\n    });\n  }, [onboard, wallets]);\n  useEffect(() => {\n    const {\n      unsubscribe\n    } = onboard.state.select(\"wallets\").subscribe(w => {\n      const serialize = list => (list || []).map(_ => [_.label, JSON.stringify([_.accounts, _.chains])]).flat().toString();\n      if (serialize(w) !== serialize(wallets)) {\n        setWallets(w);\n      }\n      const connectedWallets = w.map(_ref2 => {\n        let {\n          label\n        } = _ref2;\n        return label;\n      });\n      setPreviousConnected(connectedWallets);\n    });\n    return () => {\n      try {\n        unsubscribe();\n      } catch (_a) {}\n    };\n  }, [setPreviousConnected]);\n  useEffect(() => {\n    if (autoConnect && !!(previousConnected === null || previousConnected === void 0 ? void 0 : previousConnected[0])) {\n      setAutoConnect(false);\n      setLoading(true);\n      connect();\n    }\n  }, [previousConnected, connect, autoConnect]);\n  useEffect(() => {\n    const onboardStyles = document.createElement(\"style\");\n    onboardStyles.innerHTML = onboardCss;\n    document.querySelector(\"onboard-v2\").shadowRoot.appendChild(onboardStyles);\n  }, []);\n  const walletProvider = (_a = wallets === null || wallets === void 0 ? void 0 : wallets[0]) === null || _a === void 0 ? void 0 : _a.provider;\n  const provider = useMemo(() => walletProvider && new providers.Web3Provider(walletProvider), [walletProvider]);\n  const chainId = (_c = (_b = wallets === null || wallets === void 0 ? void 0 : wallets[0]) === null || _b === void 0 ? void 0 : _b.chains[0]) === null || _c === void 0 ? void 0 : _c.id;\n  const isChainId = !!chainId && +chainId === +config.chainId;\n  const account = (_f = (_e = (_d = wallets === null || wallets === void 0 ? void 0 : wallets[0]) === null || _d === void 0 ? void 0 : _d.accounts[0]) === null || _e === void 0 ? void 0 : _e.address) === null || _f === void 0 ? void 0 : _f.toLowerCase();\n  return useMemo(() => {\n    var _a, _b;\n    return {\n      ready: !!(wallets === null || wallets === void 0 ? void 0 : wallets.length),\n      loading,\n      connect,\n      disconnect,\n      switchWallet,\n      forceChain,\n      wallets,\n      account,\n      accountInfo: {\n        providerName: (_a = wallets === null || wallets === void 0 ? void 0 : wallets[0]) === null || _a === void 0 ? void 0 : _a.label,\n        providerIcon: (_b = wallets === null || wallets === void 0 ? void 0 : wallets[0]) === null || _b === void 0 ? void 0 : _b.icon\n      },\n      chainId: chainId && +chainId,\n      isChainId,\n      provider,\n      _oboard: onboard\n    };\n  }, [!!wallets, loading, wallets, wallets === null || wallets === void 0 ? void 0 : wallets.length, connect, disconnect, switchWallet, forceChain]);\n}\n//# sourceMappingURL=web3Onboard.hook.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}