{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmahmood/Downloads/ETHDenver/huma-workshop/huma-demo-dapp/src/features/sdk/CreditLine/components/payment/Payment.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\nimport { HumaModal, HumaModalHeader } from '../../../../../components/humaModal';\nimport { useContractFunction } from '../../../../../hooks/useContractFunction';\nimport { useAppDispatch, useAppSelector } from '../../../../../hooks/useRedux';\nimport { isTxFailed } from '../../../../../utils/transaction';\nimport { ErrorModal } from '../../../components';\nimport { resetAfterSuccess, setCLPaymentError } from '../../store/creditLine.reducers';\nimport { selectCLErrorMessage, selectCLPaymentAmount, selectCLPaymentStep } from '../../store/creditLine.selectors';\nimport { CL_PAYMENT_STEP } from '../../store/creditLine.store';\nimport { ApproveAllowance } from './ApproveAllowance';\nimport { Payback } from './Payback';\nimport { Success } from './Success';\nimport { Transfer } from './Transfer';\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport function Payment(_ref) {\n  _s();\n  let {\n    payoffAmount,\n    totalDueAmount,\n    poolInfo,\n    isOpen,\n    handleClose,\n    handleSuccess\n  } = _ref;\n  const dispatch = useAppDispatch();\n  const paymentStep = useAppSelector(selectCLPaymentStep);\n  const errorMessage = useAppSelector(selectCLErrorMessage);\n  const paymentAmount = useAppSelector(selectCLPaymentAmount);\n  const {\n    state,\n    failReason,\n    reset,\n    txReceipt\n  } = useContractFunction(state => state);\n  useEffect(() => {\n    if (isTxFailed(state) && failReason) {\n      dispatch(setCLPaymentError(failReason));\n    }\n  }, [dispatch, failReason, state]);\n  useEffect(() => {\n    if (paymentStep === CL_PAYMENT_STEP.Done && txReceipt) {\n      handleSuccess(txReceipt.blockNumber);\n    }\n  }, [handleSuccess, paymentAmount, paymentStep, txReceipt]);\n  const handleCloseModal = useCallback(() => {\n    reset();\n    dispatch(resetAfterSuccess());\n    handleClose();\n  }, [dispatch, handleClose, reset]);\n\n  // when close modal, return null to make sure all the states are reset\n  if (!isOpen) {\n    return null;\n  }\n  return _jsxs(HumaModal, {\n    isOpen: isOpen,\n    overflowY: \"auto\",\n    onClose: handleCloseModal,\n    width: \"480px\",\n    padding: \"30px 40px\",\n    disableBackdropClick: true,\n    children: [_jsx(HumaModalHeader, {\n      onClose: handleCloseModal,\n      height: 0\n    }), paymentStep === CL_PAYMENT_STEP.Payback && _jsx(Payback, {\n      poolInfo: poolInfo,\n      payoffAmount: payoffAmount,\n      totalDueAmount: totalDueAmount\n    }), paymentStep === CL_PAYMENT_STEP.ApproveAllowance && _jsx(ApproveAllowance, {\n      poolInfo: poolInfo\n    }), paymentStep === CL_PAYMENT_STEP.TransferMoney && _jsx(Transfer, {\n      poolInfo: poolInfo\n    }), paymentStep === CL_PAYMENT_STEP.Done && _jsx(Success, {\n      poolInfo: poolInfo,\n      handleAction: handleCloseModal\n    }), paymentStep === CL_PAYMENT_STEP.Error && _jsx(ErrorModal, {\n      title: \"Pay\",\n      errorMessage: errorMessage,\n      handleOk: handleCloseModal\n    })]\n  });\n}\n_s(Payment, \"+oBzBdX46Lmti526+DsHSw5NBnE=\", false, function () {\n  return [useAppDispatch, useAppSelector, useAppSelector, useAppSelector, useContractFunction];\n});\n_c = Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useCallback","useEffect","HumaModal","HumaModalHeader","useContractFunction","useAppDispatch","useAppSelector","isTxFailed","ErrorModal","resetAfterSuccess","setCLPaymentError","selectCLErrorMessage","selectCLPaymentAmount","selectCLPaymentStep","CL_PAYMENT_STEP","ApproveAllowance","Payback","Success","Transfer","Payment","payoffAmount","totalDueAmount","poolInfo","isOpen","handleClose","handleSuccess","dispatch","paymentStep","errorMessage","paymentAmount","state","failReason","reset","txReceipt","Done","blockNumber","handleCloseModal","TransferMoney","Error"],"sources":["/Users/hamzahmahmood/Downloads/ETHDenver/huma-workshop/huma-demo-dapp/src/features/sdk/CreditLine/components/payment/Payment.tsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react'\n\nimport { HumaModal, HumaModalHeader } from '../../../../../components/humaModal'\nimport { useContractFunction } from '../../../../../hooks/useContractFunction'\nimport { useAppDispatch, useAppSelector } from '../../../../../hooks/useRedux'\nimport { PoolInfoType } from '../../../../../utils/pool'\nimport { isTxFailed } from '../../../../../utils/transaction'\nimport { ErrorModal } from '../../../components'\nimport {\n  resetAfterSuccess,\n  setCLPaymentError,\n} from '../../store/creditLine.reducers'\nimport {\n  selectCLErrorMessage,\n  selectCLPaymentAmount,\n  selectCLPaymentStep,\n} from '../../store/creditLine.selectors'\nimport { CL_PAYMENT_STEP } from '../../store/creditLine.store'\nimport { ApproveAllowance } from './ApproveAllowance'\nimport { Payback } from './Payback'\nimport { Success } from './Success'\nimport { Transfer } from './Transfer'\n\ntype Props = {\n  payoffAmount: number\n  totalDueAmount: number\n  poolInfo: PoolInfoType\n  isOpen: boolean\n  handleClose: () => void\n  handleSuccess: (blockNumber: number) => void\n}\n\nexport function Payment({\n  payoffAmount,\n  totalDueAmount,\n  poolInfo,\n  isOpen,\n  handleClose,\n  handleSuccess,\n}: Props): React.ReactElement | null {\n  const dispatch = useAppDispatch()\n  const paymentStep = useAppSelector(selectCLPaymentStep)\n  const errorMessage = useAppSelector(selectCLErrorMessage)\n  const paymentAmount = useAppSelector(selectCLPaymentAmount)\n  const { state, failReason, reset, txReceipt } = useContractFunction(\n    (state) => state,\n  )\n\n  useEffect(() => {\n    if (isTxFailed(state) && failReason) {\n      dispatch(setCLPaymentError(failReason))\n    }\n  }, [dispatch, failReason, state])\n\n  useEffect(() => {\n    if (paymentStep === CL_PAYMENT_STEP.Done && txReceipt) {\n      handleSuccess(txReceipt.blockNumber)\n    }\n  }, [handleSuccess, paymentAmount, paymentStep, txReceipt])\n\n  const handleCloseModal = useCallback(() => {\n    reset()\n    dispatch(resetAfterSuccess())\n    handleClose()\n  }, [dispatch, handleClose, reset])\n\n  // when close modal, return null to make sure all the states are reset\n  if (!isOpen) {\n    return null\n  }\n\n  return (\n    <HumaModal\n      isOpen={isOpen}\n      overflowY='auto'\n      onClose={handleCloseModal}\n      width='480px'\n      padding='30px 40px'\n      disableBackdropClick\n    >\n      <HumaModalHeader onClose={handleCloseModal} height={0} />\n      {paymentStep === CL_PAYMENT_STEP.Payback && (\n        <Payback\n          poolInfo={poolInfo}\n          payoffAmount={payoffAmount}\n          totalDueAmount={totalDueAmount}\n        />\n      )}\n      {paymentStep === CL_PAYMENT_STEP.ApproveAllowance && (\n        <ApproveAllowance poolInfo={poolInfo} />\n      )}\n      {paymentStep === CL_PAYMENT_STEP.TransferMoney && (\n        <Transfer poolInfo={poolInfo} />\n      )}\n      {paymentStep === CL_PAYMENT_STEP.Done && (\n        <Success poolInfo={poolInfo} handleAction={handleCloseModal} />\n      )}\n      {paymentStep === CL_PAYMENT_STEP.Error && (\n        <ErrorModal\n          title='Pay'\n          errorMessage={errorMessage}\n          handleOk={handleCloseModal}\n        />\n      )}\n    </HumaModal>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}